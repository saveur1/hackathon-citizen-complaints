{"version":3,"sources":["../../backend/middleware/errorHandler.ts","../../backend/config/envConfig.ts","../../backend/utils/httpHandlers.ts","../../backend/utils/serviceResponse.ts"],"sourcesContent":["import type { ErrorRequestHandler, NextFunction, Request, RequestHandler, Response } from \"express\";\nimport { env } from \"@/config/envConfig\";\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\n//ADD 404 TO NOT FOUND ERROR\nconst unexpectedRequest: RequestHandler = (_req, res, next) => {\n    return next(ErrorHandler.NotFound(\"Resources not found\"));\n};\n\n//ADD ERROR TO REQUEST LOG\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n    res.locals.err = err;\n    next(err);\n};\n\n//RETURN ERROR TO USER AS JSON\nconst returnErrorToUser: ErrorRequestHandler = (error, _req, res, next) => {\n    const statusCode = error.statusCode || 500;\n    const message = error.message || \"Internal Server Error\";\n    error = { ...error, statusCode, message };\n\n    if(env.NODE_ENV === \"development\") {\n        console.log(error);\n        res.status(error.statusCode).json({\n            success:false,\n            message: error.message,\n            error,\n            stack: error.stack\n        })\n    }\n\n    if(env.NODE_ENV === \"production\"){\n        if(error.name === \"CastError\") {\n            const message = `Resource Not Found. Invalid ${error.path}`;\n            error = new ErrorHandler(message,400);\n        }\n        \n        if(error.name ===\"ValidationError\") {\n            const message = Object.values(error.errors).map((val: any) => val.message).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.name === \"ZodError\"){\n            const message = error.issues.map((issue: any) => {\n                const fieldName = issue.path[0];\n                const fieldNameLower = fieldName.toLowerCase();\n                const messageLower = issue.message.toLowerCase();\n                \n                // If field name is not already part of the message, include both\n                if (!messageLower.includes(fieldNameLower)) {\n                    return `${fieldName}: ${issue.message}`;\n                }\n                return issue.message;\n            }).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.code === 11000){\n            const message = `${Object.keys(error.keyValue)} Already exists in database`;\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"JsonWebTokenError\"){\n            const message = \"JSON web token is invalid. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"TokenExipiredError\"){\n            const message = \"JSON web token is Expired. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        return ServiceResponse.failure(error.message || \"Internal Server Error\", null, error.statusCode, res);\n    }\n}\n\n// HANDLE ERRORS BY ATTACHING STATUS CODE AND MESSAGES\nexport class ErrorHandler extends Error {\n    readonly statusCode: number;\n\n    constructor(message: string, statusCode: number){\n        super(message);\n        this.statusCode = statusCode;\n        Error.captureStackTrace(this, this.constructor);\n    }\n\n    static BadRequest(message: string) {\n        return new ErrorHandler(message, 400);\n    }\n    \n    static NotFound(message: string) {\n        return new ErrorHandler(message, 404);\n    }\n\n    static InternalServerError(message = \"Internal Server Error\") {\n        return new ErrorHandler(message, 500);\n    }\n}\n\n//CATCH ASYNCHRONOUS ERROS\nexport const asyncCatch = (handler: any) => (req: Request,res: Response,next: NextFunction)=>\n                               Promise.resolve( handler(req, res, next) )\n                                       .catch( next );\n\n\nexport default () => [unexpectedRequest, addErrorToRequestLog, returnErrorToUser];\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n    NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n    HOST: host({ devDefault: testOnly(\"localhost\") }),\n    PORT: port({ devDefault: testOnly(3000) }),\n    MONGODB_URI: str({ desc: \"MongoDB connection string\" }),\n    JWT_SECRET: str({ desc: \"Secret key for JWT\" }),\n    JWT_EXPIRES_IN: str({ default: \"1d\", desc: \"JWT expiration time\" }),\n    CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n    COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n    COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n    // Email service configuration\n    // SMTP_HOST: str({ desc: \"SMTP host for email service\" }),\n    // SMTP_PORT: num({ desc: \"SMTP port for email service\" }),\n    // SMTP_USER: str({ desc: \"SMTP username\" }),\n    // SMTP_PASS: str({ desc: \"SMTP password\" }),\n    // SMTP_FROM: str({ desc: \"Email sender address\" }),\n    // RESET_PASSWORD_EXPIRES_IN: str({ default: \"1h\", desc: \"Password reset token expiration time\" }),\n});\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\nexport const ApiResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n    try {\n        schema.parse({ body: req.body, query: req.query, params: req.params });\n        next();\n    } catch (err) {\n        const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n        const statusCode = StatusCodes.BAD_REQUEST;\n        return ServiceResponse.failure(errorMessage, null, statusCode, res);\n    }\n};\n","import { ApiResponse } from \"@/utils/httpHandlers\";\nimport { Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK, res: Response) {\n    const serviceResponse = new ServiceResponse(true, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST, res: Response) {\n    const serviceResponse = new ServiceResponse(false, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":"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","names":["dotenv","import_http_status_codes","message"]}