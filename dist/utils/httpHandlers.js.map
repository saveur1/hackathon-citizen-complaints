{"version":3,"sources":["../../backend/utils/httpHandlers.ts","../../backend/utils/serviceResponse.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\nexport const ApiResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n    try {\n        schema.parse({ body: req.body, query: req.query, params: req.params });\n        next();\n    } catch (err) {\n        const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n        const statusCode = StatusCodes.BAD_REQUEST;\n        return ServiceResponse.failure(errorMessage, null, statusCode, res);\n    }\n};\n","import { ApiResponse } from \"@/utils/httpHandlers\";\nimport { Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK, res: Response) {\n    const serviceResponse = new ServiceResponse(true, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST, res: Response) {\n    const serviceResponse = new ServiceResponse(false, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,4BAA4B;;;ACC5B,+BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC5F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,IAAI,KAAe;AACxG,UAAM,kBAAkB,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AACrF,WAAO,YAAY,iBAAiB,GAAG;AAAA,EACzC;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,aAAa,KAAe;AACjH,UAAM,kBAAkB,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AACtF,WAAO,YAAY,iBAAiB,GAAG;AAAA,EACzC;AACF;;;ADrBO,IAAM,cAAc,CAAC,iBAAuC,aAAuB;AACxF,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;AAEO,IAAM,kBAAkB,CAAC,WAAsB,CAAC,KAAc,KAAe,SAAuB;AACvG,MAAI;AACA,WAAO,MAAM,EAAE,MAAM,IAAI,MAAM,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO,CAAC;AACrE,SAAK;AAAA,EACT,SAAS,KAAK;AACV,UAAM,eAAe,kBAAmB,IAAiB,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;AAChG,UAAM,aAAa,sCAAY;AAC/B,WAAO,gBAAgB,QAAQ,cAAc,MAAM,YAAY,GAAG;AAAA,EACtE;AACJ;","names":["import_http_status_codes"]}