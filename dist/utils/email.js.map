{"version":3,"sources":["../../backend/utils/email.ts","../../backend/config/envConfig.ts"],"sourcesContent":["import nodemailer from \"nodemailer\"\nimport { env } from \"@/config/envConfig\"\n\ninterface EmailOptions {\n    email: string\n    subject: string\n    message: string\n}\n\nexport const sendEmail = async (options: EmailOptions) => {\n    // 1) Create a transporter\n    const transporter = nodemailer.createTransport({\n        host: env.SMTP_HOST,\n        port: env.SMTP_PORT,\n        auth: {\n            user: env.SMTP_USER,\n            pass: env.SMTP_PASS,\n        },\n    })\n\n    // 2) Define the email options\n    const mailOptions = {\n        from: env.SMTP_FROM,\n        to: options.email,\n        subject: options.subject,\n        text: options.message,\n    }\n\n    // 3) Actually send the email\n    await transporter.sendMail(mailOptions)\n} ","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n    NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n    HOST: host({ devDefault: testOnly(\"localhost\") }),\n    PORT: port({ devDefault: testOnly(3000) }),\n    MONGODB_URI: str({ desc: \"MongoDB connection string\" }),\n    JWT_SECRET: str({ desc: \"Secret key for JWT\" }),\n    JWT_EXPIRES_IN: str({ default: \"1d\", desc: \"JWT expiration time\" }),\n    CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n    COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n    COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n    // Email service configuration\n    // SMTP_HOST: str({ desc: \"SMTP host for email service\" }),\n    // SMTP_PORT: num({ desc: \"SMTP port for email service\" }),\n    // SMTP_USER: str({ desc: \"SMTP username\" }),\n    // SMTP_PASS: str({ desc: \"SMTP password\" }),\n    // SMTP_FROM: str({ desc: \"Email sender address\" }),\n    // RESET_PASSWORD_EXPIRES_IN: str({ default: \"1h\", desc: \"Password reset token expiration time\" }),\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAuB;;;ACAvB,oBAAmB;AACnB,qBAAyD;AAEzD,cAAAA,QAAO,OAAO;AAEP,IAAM,UAAM,yBAAS,QAAQ,KAAK;AAAA,EACrC,cAAU,oBAAI,EAAE,gBAAY,yBAAS,MAAM,GAAG,SAAS,CAAC,eAAe,cAAc,MAAM,EAAE,CAAC;AAAA,EAC9F,UAAM,qBAAK,EAAE,gBAAY,yBAAS,WAAW,EAAE,CAAC;AAAA,EAChD,UAAM,qBAAK,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EACzC,iBAAa,oBAAI,EAAE,MAAM,4BAA4B,CAAC;AAAA,EACtD,gBAAY,oBAAI,EAAE,MAAM,qBAAqB,CAAC;AAAA,EAC9C,oBAAgB,oBAAI,EAAE,SAAS,MAAM,MAAM,sBAAsB,CAAC;AAAA,EAClE,iBAAa,oBAAI,EAAE,gBAAY,yBAAS,uBAAuB,EAAE,CAAC;AAAA,EAClE,oCAAgC,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EAClE,iCAA6B,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnE,CAAC;;;ADbM,IAAM,YAAY,OAAO,YAA0B;AAEtD,QAAM,cAAc,kBAAAC,QAAW,gBAAgB;AAAA,IAC3C,MAAM,IAAI;AAAA,IACV,MAAM,IAAI;AAAA,IACV,MAAM;AAAA,MACF,MAAM,IAAI;AAAA,MACV,MAAM,IAAI;AAAA,IACd;AAAA,EACJ,CAAC;AAGD,QAAM,cAAc;AAAA,IAChB,MAAM,IAAI;AAAA,IACV,IAAI,QAAQ;AAAA,IACZ,SAAS,QAAQ;AAAA,IACjB,MAAM,QAAQ;AAAA,EAClB;AAGA,QAAM,YAAY,SAAS,WAAW;AAC1C;","names":["dotenv","nodemailer"]}