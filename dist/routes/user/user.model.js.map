{"version":3,"sources":["../../../backend/routes/user/user.model.ts","../../../backend/utils/enums.ts"],"sourcesContent":["import mongoose, { type Document, Schema } from \"mongoose\"\nimport { UserRole } from \"@/utils/enums\"\nimport bcrypt from \"bcryptjs\"\n\nexport interface IUser extends Document {\n    name: string\n    email: string\n    password: string\n    role: UserRole\n    createdAt: Date\n    updatedAt: Date\n    complaintsSubmitted: mongoose.Types.ObjectId[]\n    agencyId?: mongoose.Types.ObjectId\n    responses: mongoose.Types.ObjectId[]\n    resetPasswordToken?: string\n    resetPasswordExpires?: Date\n    comparePassword(candidatePassword: string): Promise<boolean>\n}\n\nconst userSchema = new Schema<IUser>(\n    {\n        name: {\n            type: String,\n            required: [true, \"Name is required\"],\n            trim: true,\n        },\n        email: {\n            type: String,\n            required: [true, \"Email is required\"],\n            unique: true,\n            lowercase: true,\n            trim: true,\n            validate: {\n                validator: (v: string) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v),\n                message: \"Please enter a valid email\",\n            },\n        },\n        agencyId: {\n            type: Schema.Types.ObjectId,\n            ref: \"Agency\",\n        },\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n            minlength: [8, \"Password must be at least 8 characters\"],\n            select: false,\n        },\n        role: {\n            type: String,\n            enum: Object.values(UserRole),\n            default: UserRole.CITIZEN,\n        },\n        complaintsSubmitted: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Complaint\",\n            },\n        ],\n        responses: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Response\",\n            },\n        ],\n        resetPasswordToken: String,\n        resetPasswordExpires: Date,\n    },\n    {\n        timestamps: true,\n    },\n)\n\n// Hash password before saving\nuserSchema.pre(\"save\", async function (next) {\n    if (!this.isModified(\"password\")) return next()\n\n    try {\n        const salt = await bcrypt.genSalt(10)\n        this.password = await bcrypt.hash(this.password, salt)\n        next()\n    } catch (error: any) {\n        next(error)\n    }\n})\n\n// Method to compare passwords\nuserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\n    return bcrypt.compare(candidatePassword, this.password)\n}\n\nexport const User = mongoose.model<IUser>(\"User\", userSchema)\n","export enum UserRole {\n  CITIZEN = \"CITIZEN\",\n  AGENCY_STAFF = \"AGENCY_STAFF\",\n  ADMIN = \"ADMIN\",\n}\n\nexport enum ComplaintStatus {\n  SUBMITTED = \"SUBMITTED\",\n  UNDER_REVIEW = \"UNDER_REVIEW\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  RESOLVED = \"RESOLVED\",\n  REJECTED = \"REJECTED\",\n  ESCALATED = \"ESCALATED\",\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgD;;;ACAzC,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,kBAAe;AACf,EAAAA,UAAA,WAAQ;AAHE,SAAAA;AAAA,GAAA;;;ADEZ,sBAAmB;AAiBnB,IAAM,aAAa,IAAI;AAAA,EACnB;AAAA,IACI,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,kBAAkB;AAAA,MACnC,MAAM;AAAA,IACV;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,mBAAmB;AAAA,MACpC,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,QACN,WAAW,CAAC,MAAc,8CAA8C,KAAK,CAAC;AAAA,QAC9E,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,MAAM,uBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,IACT;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,sBAAsB;AAAA,MACvC,WAAW,CAAC,GAAG,wCAAwC;AAAA,MACvD,QAAQ;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,MAAM,OAAO,OAAO,QAAQ;AAAA,MAC5B;AAAA,IACJ;AAAA,IACA,qBAAqB;AAAA,MACjB;AAAA,QACI,MAAM,uBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,MACP;AAAA,QACI,MAAM,uBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,IACA,oBAAoB;AAAA,IACpB,sBAAsB;AAAA,EAC1B;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAGA,WAAW,IAAI,QAAQ,eAAgB,MAAM;AACzC,MAAI,CAAC,KAAK,WAAW,UAAU,EAAG,QAAO,KAAK;AAE9C,MAAI;AACA,UAAM,OAAO,MAAM,gBAAAC,QAAO,QAAQ,EAAE;AACpC,SAAK,WAAW,MAAM,gBAAAA,QAAO,KAAK,KAAK,UAAU,IAAI;AACrD,SAAK;AAAA,EACT,SAAS,OAAY;AACjB,SAAK,KAAK;AAAA,EACd;AACJ,CAAC;AAGD,WAAW,QAAQ,kBAAkB,eAAgB,mBAA6C;AAC9F,SAAO,gBAAAA,QAAO,QAAQ,mBAAmB,KAAK,QAAQ;AAC1D;AAEO,IAAM,OAAO,gBAAAC,QAAS,MAAa,QAAQ,UAAU;","names":["UserRole","bcrypt","mongoose"]}