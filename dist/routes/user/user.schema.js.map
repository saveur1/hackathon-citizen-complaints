{"version":3,"sources":["../../../backend/routes/user/user.schema.ts","../../../backend/utils/enums.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { UserRole } from \"@/utils/enums\"\n\nexport const createUserSchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\"),\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    role: z.nativeEnum(UserRole).optional(),\n})\n\nexport const loginUserSchema = z.object({\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(1, \"Password is required\"),\n})\n\nexport const updateUserSchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional(),\n    email: z.string().email(\"Invalid email address\").optional(),\n    password: z.string().min(8, \"Password must be at least 8 characters\").optional(),\n    role: z.nativeEnum(UserRole).optional(),\n})\n\nexport const forgotPasswordSchema = z.object({\n    email: z.string().email(\"Invalid email address\"),\n})\n\nexport const resetPasswordSchema = z.object({\n    token: z.string(),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n})\n\nexport type CreateUserInput = z.infer<typeof createUserSchema>\nexport type LoginUserInput = z.infer<typeof loginUserSchema>\nexport type UpdateUserInput = z.infer<typeof updateUserSchema>\nexport type ForgotPasswordInput = z.infer<typeof forgotPasswordSchema>\nexport type ResetPasswordInput = z.infer<typeof resetPasswordSchema>\n","export enum UserRole {\n  CITIZEN = \"CITIZEN\",\n  AGENCY_STAFF = \"AGENCY_STAFF\",\n  ADMIN = \"ADMIN\",\n}\n\nexport enum ComplaintStatus {\n  SUBMITTED = \"SUBMITTED\",\n  UNDER_REVIEW = \"UNDER_REVIEW\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  RESOLVED = \"RESOLVED\",\n  REJECTED = \"REJECTED\",\n  ESCALATED = \"ESCALATED\",\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;;;ACAX,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,kBAAe;AACf,EAAAA,UAAA,WAAQ;AAHE,SAAAA;AAAA,GAAA;;;ADGL,IAAM,mBAAmB,aAAE,OAAO;AAAA,EACrC,MAAM,aAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC;AAAA,EAC5D,OAAO,aAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,aAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AAAA,EACpE,MAAM,aAAE,WAAW,QAAQ,EAAE,SAAS;AAC1C,CAAC;AAEM,IAAM,kBAAkB,aAAE,OAAO;AAAA,EACpC,OAAO,aAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,aAAE,OAAO,EAAE,IAAI,GAAG,sBAAsB;AACtD,CAAC;AAEM,IAAM,mBAAmB,aAAE,OAAO;AAAA,EACrC,MAAM,aAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC,EAAE,SAAS;AAAA,EACvE,OAAO,aAAE,OAAO,EAAE,MAAM,uBAAuB,EAAE,SAAS;AAAA,EAC1D,UAAU,aAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC,EAAE,SAAS;AAAA,EAC/E,MAAM,aAAE,WAAW,QAAQ,EAAE,SAAS;AAC1C,CAAC;AAEM,IAAM,uBAAuB,aAAE,OAAO;AAAA,EACzC,OAAO,aAAE,OAAO,EAAE,MAAM,uBAAuB;AACnD,CAAC;AAEM,IAAM,sBAAsB,aAAE,OAAO;AAAA,EACxC,OAAO,aAAE,OAAO;AAAA,EAChB,UAAU,aAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AACxE,CAAC;","names":["UserRole"]}