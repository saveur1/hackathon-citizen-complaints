{"version":3,"sources":["../../../backend/routes/agency/agency.routes.ts","../../../backend/routes/agency/agency.controller.ts","../../../backend/routes/agency/agency.model.ts","../../../backend/config/envConfig.ts","../../../backend/utils/httpHandlers.ts","../../../backend/utils/serviceResponse.ts","../../../backend/middleware/errorHandler.ts","../../../backend/routes/agency/agency.schema.ts","../../../backend/middleware/auth.middleware.ts","../../../backend/routes/user/user.model.ts","../../../backend/utils/enums.ts","../../../backend/api-docs/openAPIResponseBuilders.ts"],"sourcesContent":["import { Router } from \"express\"\nimport { createAgency, getAllAgencies, getAgency, updateAgency, deleteAgency } from \"@/routes/agency/agency.controller\"\nimport { protect, restrictTo } from \"@/middleware/auth.middleware\"\nimport { UserRole } from \"@/utils/enums\";\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { z } from 'zod';\nimport { createAgencySchema } from '@/routes/agency/agency.schema';\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\n\nextendZodWithOpenApi(z);\n\nconst router = Router()\nexport const registry = new OpenAPIRegistry();\n\nregistry.registerComponent(\"securitySchemes\", \"Authorization\", {\n    type: \"http\",\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    name: \"Authorization\",\n    in: \"header\",\n    description: \"JWT Authorization header using the Bearer scheme. Example:\"\n});\n\n// Public routes\n\n//GET ALL AGENCIES\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/agencies\",\n    tags: [\"Agencies\"],\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.get(\"/\", getAllAgencies)\n\n\n//GET AGENCY BY ID\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/agencies/{ id }\",\n    tags: [\"Agencies\"],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.get(\"/:id\", getAgency)\n\n// Protected routes\nrouter.use(protect)\nrouter.use(restrictTo(UserRole.ADMIN)) // Only admins can manage agencies\n\n\n//CREATE AGENCY\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/agencies\",\n    description: \"This route is for registering new agency.\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: {\n        body: createApiReqestBody(createAgencySchema),\n    },\n    responses: createApiResponse(createAgencySchema, \"Success\"),\n});\nrouter.post(\"/\", createAgency)\n\n\n//UPDATE AGENCY\nregistry.registerPath({\n    method: \"patch\",\n    path: \"/api/agencies/{ update_id }\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: {\n        params: z.object({ update_id: z.string() }),\n        body: createApiReqestBody(createAgencySchema),\n    },\n    responses: createApiResponse(createAgencySchema, \"Success\"),\n});\nrouter.patch(\"/:id\", updateAgency)\n\n\n//DELETE AGENCY\nregistry.registerPath({\n    method: \"delete\",\n    path: \"/api/agencies/{ id }\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.delete(\"/:id\", deleteAgency)\n\nexport default router\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport { Agency } from \"@/routes/agency/agency.model\";\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\";\nimport { createAgencySchema, updateAgencySchema } from \"@/routes/agency/agency.schema\";\n\nexport const createAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = createAgencySchema.parse(req.body)\n\n    // 2) Check if agency already exists\n    const existingAgency = await Agency.findOne({ name: validatedData.name })\n    if (existingAgency) {\n        return next(new ErrorHandler(\"Agency with this name already exists\", StatusCodes.CONFLICT))\n    }\n\n    // 3) Create agency\n    const newAgency = await Agency.create(validatedData)\n\n    // 4) Send response\n    res.status(StatusCodes.CREATED).json({\n        status: \"success\",\n        data: {\n        agency: newAgency,\n        },\n    })\n})\n\nexport const getAllAgencies = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agencies = await Agency.find()\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        results: agencies.length,\n        data: {\n        agencies,\n        },\n    })\n})\n\nexport const getAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agency = await Agency.findById(req.params.id)\n\n    if (!agency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        agency,\n        },\n    })\n})\n\nexport const updateAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = updateAgencySchema.parse(req.body)\n\n    // 2) Update agency\n    const updatedAgency = await Agency.findByIdAndUpdate(req.params.id, validatedData, {\n        new: true,\n        runValidators: true,\n    })\n\n    if (!updatedAgency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 3) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        agency: updatedAgency,\n        },\n    })\n})\n\nexport const deleteAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agency = await Agency.findByIdAndDelete(req.params.id)\n\n    if (!agency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    res.status(StatusCodes.NO_CONTENT).json({\n        status: \"success\",\n        data: null,\n    })\n})\n","import mongoose, { type Document, Schema } from \"mongoose\"\n\nexport interface IAgency extends Document {\n  name: string\n  description: string\n  contactEmail: string\n  serviceCategories: string[]\n}\n\nconst agencySchema = new Schema<IAgency>(\n  {\n    name: {\n      type: String,\n      required: [true, \"Agency name is required\"],\n      trim: true,\n      unique: true,\n    },\n    description: {\n      type: String,\n      required: [true, \"Agency description is required\"],\n    },\n    contactEmail: {\n      type: String,\n      required: [true, \"Contact email is required\"],\n      lowercase: true,\n      validate: {\n        validator: (v: string) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v),\n        message: \"Please enter a valid email\",\n      },\n    },\n    serviceCategories: [\n      {\n        type: String,\n        required: [true, \"At least one service category is required\"],\n      },\n    ],\n  },\n  {\n    timestamps: true,\n  },\n)\n\nexport const Agency = mongoose.model<IAgency>(\"Agency\", agencySchema)\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n    NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n    HOST: host({ devDefault: testOnly(\"localhost\") }),\n    PORT: port({ devDefault: testOnly(3000) }),\n    MONGODB_URI: str({ desc: \"MongoDB connection string\" }),\n    JWT_SECRET: str({ desc: \"Secret key for JWT\" }),\n    JWT_EXPIRES_IN: str({ default: \"1d\", desc: \"JWT expiration time\" }),\n    CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n    COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n    COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n    // Email service configuration\n    // SMTP_HOST: str({ desc: \"SMTP host for email service\" }),\n    // SMTP_PORT: num({ desc: \"SMTP port for email service\" }),\n    // SMTP_USER: str({ desc: \"SMTP username\" }),\n    // SMTP_PASS: str({ desc: \"SMTP password\" }),\n    // SMTP_FROM: str({ desc: \"Email sender address\" }),\n    // RESET_PASSWORD_EXPIRES_IN: str({ default: \"1h\", desc: \"Password reset token expiration time\" }),\n});\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\nexport const ApiResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n    try {\n        schema.parse({ body: req.body, query: req.query, params: req.params });\n        next();\n    } catch (err) {\n        const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n        const statusCode = StatusCodes.BAD_REQUEST;\n        return ServiceResponse.failure(errorMessage, null, statusCode, res);\n    }\n};\n","import { ApiResponse } from \"@/utils/httpHandlers\";\nimport { Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK, res: Response) {\n    const serviceResponse = new ServiceResponse(true, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST, res: Response) {\n    const serviceResponse = new ServiceResponse(false, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n","import type { ErrorRequestHandler, NextFunction, Request, RequestHandler, Response } from \"express\";\nimport { env } from \"@/config/envConfig\";\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\n//ADD 404 TO NOT FOUND ERROR\nconst unexpectedRequest: RequestHandler = (_req, res, next) => {\n    return next(ErrorHandler.NotFound(\"Resources not found\"));\n};\n\n//ADD ERROR TO REQUEST LOG\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n    res.locals.err = err;\n    next(err);\n};\n\n//RETURN ERROR TO USER AS JSON\nconst returnErrorToUser: ErrorRequestHandler = (error, _req, res, next) => {\n    const statusCode = error.statusCode || 500;\n    const message = error.message || \"Internal Server Error\";\n    error = { ...error, statusCode, message };\n\n    if(env.NODE_ENV === \"development\") {\n        console.log(error);\n        res.status(error.statusCode).json({\n            success:false,\n            message: error.message,\n            error,\n            stack: error.stack\n        })\n    }\n\n    if(env.NODE_ENV === \"production\"){\n        if(error.name === \"CastError\") {\n            const message = `Resource Not Found. Invalid ${error.path}`;\n            error = new ErrorHandler(message,400);\n        }\n        \n        if(error.name ===\"ValidationError\") {\n            const message = Object.values(error.errors).map((val: any) => val.message).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.name === \"ZodError\"){\n            const message = error.issues.map((issue: any) => {\n                const fieldName = issue.path[0];\n                const fieldNameLower = fieldName.toLowerCase();\n                const messageLower = issue.message.toLowerCase();\n                \n                // If field name is not already part of the message, include both\n                if (!messageLower.includes(fieldNameLower)) {\n                    return `${fieldName}: ${issue.message}`;\n                }\n                return issue.message;\n            }).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.code === 11000){\n            const message = `${Object.keys(error.keyValue)} Already exists in database`;\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"JsonWebTokenError\"){\n            const message = \"JSON web token is invalid. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"TokenExipiredError\"){\n            const message = \"JSON web token is Expired. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        return ServiceResponse.failure(error.message || \"Internal Server Error\", null, error.statusCode, res);\n    }\n}\n\n// HANDLE ERRORS BY ATTACHING STATUS CODE AND MESSAGES\nexport class ErrorHandler extends Error {\n    readonly statusCode: number;\n\n    constructor(message: string, statusCode: number){\n        super(message);\n        this.statusCode = statusCode;\n        Error.captureStackTrace(this, this.constructor);\n    }\n\n    static BadRequest(message: string) {\n        return new ErrorHandler(message, 400);\n    }\n    \n    static NotFound(message: string) {\n        return new ErrorHandler(message, 404);\n    }\n\n    static InternalServerError(message = \"Internal Server Error\") {\n        return new ErrorHandler(message, 500);\n    }\n}\n\n//CATCH ASYNCHRONOUS ERROS\nexport const asyncCatch = (handler: any) => (req: Request,res: Response,next: NextFunction)=>\n                               Promise.resolve( handler(req, res, next) )\n                                       .catch( next );\n\n\nexport default () => [unexpectedRequest, addErrorToRequestLog, returnErrorToUser];\n","import { z } from \"zod\"\n\nexport const createAgencySchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\"),\n    description: z.string().min(10, \"Description must be at least 10 characters\"),\n    contactEmail: z.string().email(\"Invalid email address\"),\n    serviceCategories: z.array(z.string()).min(1, \"At least one service category is required\"),\n})\n\nexport const updateAgencySchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional(),\n    description: z.string().min(10, \"Description must be at least 10 characters\").optional(),\n    contactEmail: z.string().email(\"Invalid email address\").optional(),\n    serviceCategories: z.array(z.string()).min(1, \"At least one service category is required\").optional(),\n})\n\nexport type CreateAgencyInput = z.infer<typeof createAgencySchema>\nexport type UpdateAgencyInput = z.infer<typeof updateAgencySchema>\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport jwt from \"jsonwebtoken\"\nimport { env } from \"@/config/envConfig\"\nimport { User } from \"@/routes/user/user.model\";\nimport type { UserRole } from \"@/utils/enums\";\nimport { asyncCatch, ErrorHandler } from \"@/middleware/errorHandler\"\n\ninterface JwtPayload {\n    id: string\n}\n\ndeclare global {\n    namespace Express {\n        interface Request {\n            user?: any\n        }\n    }\n}\n\nexport const protect = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Get token and check if it exists\n    let token\n    if (req.headers.authorization && req.headers.authorization.startsWith(\"Bearer\")) {\n        token = req.headers.authorization.split(\" \")[1]\n    }\n\n    if (!token) {\n        return next(new ErrorHandler(\"You are not logged in. Please log in to get access.\", StatusCodes.UNAUTHORIZED))\n    }\n\n    // 2) Verify token\n    const decoded = jwt.verify(token, env.JWT_SECRET) as JwtPayload\n\n    // 3) Check if user still exists\n    const user = await User.findById(decoded.id)\n    if (!user) {\n        return next(new ErrorHandler(\"The user belonging to this token no longer exists.\", StatusCodes.UNAUTHORIZED))\n    }\n\n    // 4) Grant access to protected route\n    req.user = user\n    next()\n})\n\nexport const restrictTo = (...roles: UserRole[]) => {\n    return (req: Request, res: Response, next: NextFunction) => {\n        if (!roles.includes(req.user.role)) {\n            return next(new ErrorHandler(\"You do not have permission to perform this action\", StatusCodes.FORBIDDEN))\n        }\n        next()\n    }\n}\n","import mongoose, { type Document, Schema } from \"mongoose\"\nimport { UserRole } from \"@/utils/enums\"\nimport bcrypt from \"bcryptjs\"\n\nexport interface IUser extends Document {\n    name: string\n    email: string\n    password: string\n    role: UserRole\n    createdAt: Date\n    updatedAt: Date\n    complaintsSubmitted: mongoose.Types.ObjectId[]\n    agencyId?: mongoose.Types.ObjectId\n    responses: mongoose.Types.ObjectId[]\n    resetPasswordToken?: string\n    resetPasswordExpires?: Date\n    comparePassword(candidatePassword: string): Promise<boolean>\n}\n\nconst userSchema = new Schema<IUser>(\n    {\n        name: {\n            type: String,\n            required: [true, \"Name is required\"],\n            trim: true,\n        },\n        email: {\n            type: String,\n            required: [true, \"Email is required\"],\n            unique: true,\n            lowercase: true,\n            trim: true,\n            validate: {\n                validator: (v: string) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v),\n                message: \"Please enter a valid email\",\n            },\n        },\n        agencyId: {\n            type: Schema.Types.ObjectId,\n            ref: \"Agency\",\n        },\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n            minlength: [8, \"Password must be at least 8 characters\"],\n            select: false,\n        },\n        role: {\n            type: String,\n            enum: Object.values(UserRole),\n            default: UserRole.CITIZEN,\n        },\n        complaintsSubmitted: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Complaint\",\n            },\n        ],\n        responses: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Response\",\n            },\n        ],\n        resetPasswordToken: String,\n        resetPasswordExpires: Date,\n    },\n    {\n        timestamps: true,\n    },\n)\n\n// Hash password before saving\nuserSchema.pre(\"save\", async function (next) {\n    if (!this.isModified(\"password\")) return next()\n\n    try {\n        const salt = await bcrypt.genSalt(10)\n        this.password = await bcrypt.hash(this.password, salt)\n        next()\n    } catch (error: any) {\n        next(error)\n    }\n})\n\n// Method to compare passwords\nuserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\n    return bcrypt.compare(candidatePassword, this.password)\n}\n\nexport const User = mongoose.model<IUser>(\"User\", userSchema)\n","export enum UserRole {\n  CITIZEN = \"CITIZEN\",\n  AGENCY_STAFF = \"AGENCY_STAFF\",\n  ADMIN = \"ADMIN\",\n}\n\nexport enum ComplaintStatus {\n  SUBMITTED = \"SUBMITTED\",\n  UNDER_REVIEW = \"UNDER_REVIEW\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  RESOLVED = \"RESOLVED\",\n  REJECTED = \"REJECTED\",\n  ESCALATED = \"ESCALATED\",\n}\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/utils/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        \"application/json\": {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\nexport function createApiReqestBody(schema: z.ZodTypeAny, type = \"application/json\") {\n    return {\n      content: {\n        [type]: {\n          schema: schema,\n        },\n      },\n    };\n  }\n"],"mappings":"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","names":["import_http_status_codes","mongoose","dotenv","import_http_status_codes","import_zod","import_http_status_codes","import_mongoose","UserRole","bcrypt","mongoose","jwt","import_http_status_codes","import_zod","import_zod_to_openapi"]}