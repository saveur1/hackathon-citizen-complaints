{"version":3,"sources":["../../backend/api-docs/openAPIDocumentGenerator.ts","../../backend/routes/agency/agency.routes.ts","../../backend/routes/agency/agency.controller.ts","../../backend/routes/agency/agency.model.ts","../../backend/config/envConfig.ts","../../backend/utils/httpHandlers.ts","../../backend/utils/serviceResponse.ts","../../backend/middleware/errorHandler.ts","../../backend/routes/agency/agency.schema.ts","../../backend/middleware/auth.middleware.ts","../../backend/routes/user/user.model.ts","../../backend/utils/enums.ts","../../backend/api-docs/openAPIResponseBuilders.ts","../../backend/routes/auth/auth.routes.ts","../../backend/routes/auth/auth.controller.ts","../../backend/routes/user/user.schema.ts","../../backend/utils/email.ts","../../backend/routes/complaint/complaint.routes.ts","../../backend/routes/complaint/complaint.controller.ts","../../backend/routes/complaint/complaint.model.ts","../../backend/routes/complaint/complaint.schema.ts","../../backend/routes/user/user.routes.ts","../../backend/routes/user/user.controller.ts","../../backend/routes/response/response.routes.ts","../../backend/routes/response/response.controller.ts","../../backend/routes/response/response.model.ts","../../backend/routes/response/response.schema.ts"],"sourcesContent":["// import { healthCheckRegistry } from \"@/routes/healthCheck/healthCheckRouter\";\nimport { registry as agencyRegistry } from \"@/routes/agency/agency.routes\";\nimport { registry as authRegistry } from \"@/routes/auth/auth.routes\";\nimport { registry as complaintsRegistry } from \"@/routes/complaint/complaint.routes\";\nimport { registry as usersRegistry } from \"@/routes/user/user.routes\";\nimport { registry as responseRegistry } from \"@/routes/response/response.routes\";\nimport { OpenAPIRegistry, OpenApiGeneratorV3 } from \"@asteasolutions/zod-to-openapi\";\n\nexport function generateOpenAPIDocument() {\n    const registry = new OpenAPIRegistry([ \n        agencyRegistry, \n        authRegistry, \n        complaintsRegistry,\n        usersRegistry,\n        responseRegistry\n    ]);\n    const generator = new OpenApiGeneratorV3(registry.definitions);\n\n    return generator.generateDocument({\n        openapi: \"3.0.0\",\n        info: {\n            version: \"1.0.0\",\n            title: \"Swagger API\",\n        },\n        externalDocs: {\n            description: \"View the raw OpenAPI Specification in JSON format\",\n            url: \"/swagger.json\",\n        },\n    });\n}\n","import { Router } from \"express\"\nimport { createAgency, getAllAgencies, getAgency, updateAgency, deleteAgency } from \"@/routes/agency/agency.controller\"\nimport { protect, restrictTo } from \"@/middleware/auth.middleware\"\nimport { UserRole } from \"@/utils/enums\";\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { z } from 'zod';\nimport { createAgencySchema } from '@/routes/agency/agency.schema';\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\n\nextendZodWithOpenApi(z);\n\nconst router = Router()\nexport const registry = new OpenAPIRegistry();\n\nregistry.registerComponent(\"securitySchemes\", \"Authorization\", {\n    type: \"http\",\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    name: \"Authorization\",\n    in: \"header\",\n    description: \"JWT Authorization header using the Bearer scheme. Example:\"\n});\n\n// Public routes\n\n//GET ALL AGENCIES\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/agencies\",\n    tags: [\"Agencies\"],\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.get(\"/\", getAllAgencies)\n\n\n//GET AGENCY BY ID\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/agencies/{ id }\",\n    tags: [\"Agencies\"],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.get(\"/:id\", getAgency)\n\n// Protected routes\nrouter.use(protect)\nrouter.use(restrictTo(UserRole.ADMIN)) // Only admins can manage agencies\n\n\n//CREATE AGENCY\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/agencies\",\n    description: \"This route is for registering new agency.\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: {\n        body: createApiReqestBody(createAgencySchema),\n    },\n    responses: createApiResponse(createAgencySchema, \"Success\"),\n});\nrouter.post(\"/\", createAgency)\n\n\n//UPDATE AGENCY\nregistry.registerPath({\n    method: \"patch\",\n    path: \"/api/agencies/{ update_id }\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: {\n        params: z.object({ update_id: z.string() }),\n        body: createApiReqestBody(createAgencySchema),\n    },\n    responses: createApiResponse(createAgencySchema, \"Success\"),\n});\nrouter.patch(\"/:id\", updateAgency)\n\n\n//DELETE AGENCY\nregistry.registerPath({\n    method: \"delete\",\n    path: \"/api/agencies/{ id }\",\n    tags: [\"Agencies\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(z.null(), \"Success\"),\n});\nrouter.delete(\"/:id\", deleteAgency)\n\nexport default router\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport { Agency } from \"@/routes/agency/agency.model\";\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\";\nimport { createAgencySchema, updateAgencySchema } from \"@/routes/agency/agency.schema\";\n\nexport const createAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = createAgencySchema.parse(req.body)\n\n    // 2) Check if agency already exists\n    const existingAgency = await Agency.findOne({ name: validatedData.name })\n    if (existingAgency) {\n        return next(new ErrorHandler(\"Agency with this name already exists\", StatusCodes.CONFLICT))\n    }\n\n    // 3) Create agency\n    const newAgency = await Agency.create(validatedData)\n\n    // 4) Send response\n    res.status(StatusCodes.CREATED).json({\n        status: \"success\",\n        data: {\n        agency: newAgency,\n        },\n    })\n})\n\nexport const getAllAgencies = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agencies = await Agency.find()\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        results: agencies.length,\n        data: {\n        agencies,\n        },\n    })\n})\n\nexport const getAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agency = await Agency.findById(req.params.id)\n\n    if (!agency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        agency,\n        },\n    })\n})\n\nexport const updateAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = updateAgencySchema.parse(req.body)\n\n    // 2) Update agency\n    const updatedAgency = await Agency.findByIdAndUpdate(req.params.id, validatedData, {\n        new: true,\n        runValidators: true,\n    })\n\n    if (!updatedAgency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 3) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        agency: updatedAgency,\n        },\n    })\n})\n\nexport const deleteAgency = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const agency = await Agency.findByIdAndDelete(req.params.id)\n\n    if (!agency) {\n        return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n    }\n\n    res.status(StatusCodes.NO_CONTENT).json({\n        status: \"success\",\n        data: null,\n    })\n})\n","import mongoose, { type Document, Schema } from \"mongoose\"\n\nexport interface IAgency extends Document {\n  name: string\n  description: string\n  contactEmail: string\n  serviceCategories: string[]\n}\n\nconst agencySchema = new Schema<IAgency>(\n  {\n    name: {\n      type: String,\n      required: [true, \"Agency name is required\"],\n      trim: true,\n      unique: true,\n    },\n    description: {\n      type: String,\n      required: [true, \"Agency description is required\"],\n    },\n    contactEmail: {\n      type: String,\n      required: [true, \"Contact email is required\"],\n      lowercase: true,\n      validate: {\n        validator: (v: string) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v),\n        message: \"Please enter a valid email\",\n      },\n    },\n    serviceCategories: [\n      {\n        type: String,\n        required: [true, \"At least one service category is required\"],\n      },\n    ],\n  },\n  {\n    timestamps: true,\n  },\n)\n\nexport const Agency = mongoose.model<IAgency>(\"Agency\", agencySchema)\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n    NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n    HOST: host({ devDefault: testOnly(\"localhost\") }),\n    PORT: port({ devDefault: testOnly(3000) }),\n    MONGODB_URI: str({ desc: \"MongoDB connection string\" }),\n    JWT_SECRET: str({ desc: \"Secret key for JWT\" }),\n    JWT_EXPIRES_IN: str({ default: \"1d\", desc: \"JWT expiration time\" }),\n    CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n    COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n    COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n    // Email service configuration\n    // SMTP_HOST: str({ desc: \"SMTP host for email service\" }),\n    // SMTP_PORT: num({ desc: \"SMTP port for email service\" }),\n    // SMTP_USER: str({ desc: \"SMTP username\" }),\n    // SMTP_PASS: str({ desc: \"SMTP password\" }),\n    // SMTP_FROM: str({ desc: \"Email sender address\" }),\n    // RESET_PASSWORD_EXPIRES_IN: str({ default: \"1h\", desc: \"Password reset token expiration time\" }),\n});\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\nexport const ApiResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n    try {\n        schema.parse({ body: req.body, query: req.query, params: req.params });\n        next();\n    } catch (err) {\n        const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n        const statusCode = StatusCodes.BAD_REQUEST;\n        return ServiceResponse.failure(errorMessage, null, statusCode, res);\n    }\n};\n","import { ApiResponse } from \"@/utils/httpHandlers\";\nimport { Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK, res: Response) {\n    const serviceResponse = new ServiceResponse(true, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST, res: Response) {\n    const serviceResponse = new ServiceResponse(false, message, responseObject, statusCode);\n    return ApiResponse(serviceResponse, res);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n","import type { ErrorRequestHandler, NextFunction, Request, RequestHandler, Response } from \"express\";\nimport { env } from \"@/config/envConfig\";\nimport { ServiceResponse } from \"@/utils/serviceResponse\";\n\n//ADD 404 TO NOT FOUND ERROR\nconst unexpectedRequest: RequestHandler = (_req, res, next) => {\n    return next(ErrorHandler.NotFound(\"Resources not found\"));\n};\n\n//ADD ERROR TO REQUEST LOG\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n    res.locals.err = err;\n    next(err);\n};\n\n//RETURN ERROR TO USER AS JSON\nconst returnErrorToUser: ErrorRequestHandler = (error, _req, res, next) => {\n    const statusCode = error.statusCode || 500;\n    const message = error.message || \"Internal Server Error\";\n    error = { ...error, statusCode, message };\n\n    if(env.NODE_ENV === \"development\") {\n        console.log(error);\n        res.status(error.statusCode).json({\n            success:false,\n            message: error.message,\n            error,\n            stack: error.stack\n        })\n    }\n\n    if(env.NODE_ENV === \"production\"){\n        if(error.name === \"CastError\") {\n            const message = `Resource Not Found. Invalid ${error.path}`;\n            error = new ErrorHandler(message,400);\n        }\n        \n        if(error.name ===\"ValidationError\") {\n            const message = Object.values(error.errors).map((val: any) => val.message).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.name === \"ZodError\"){\n            const message = error.issues.map((issue: any) => {\n                const fieldName = issue.path[0];\n                const fieldNameLower = fieldName.toLowerCase();\n                const messageLower = issue.message.toLowerCase();\n                \n                // If field name is not already part of the message, include both\n                if (!messageLower.includes(fieldNameLower)) {\n                    return `${fieldName}: ${issue.message}`;\n                }\n                return issue.message;\n            }).join(\", \");\n            error = new ErrorHandler(message, 400);\n        }\n\n        if(error.code === 11000){\n            const message = `${Object.keys(error.keyValue)} Already exists in database`;\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"JsonWebTokenError\"){\n            const message = \"JSON web token is invalid. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        if(error.name === \"TokenExipiredError\"){\n            const message = \"JSON web token is Expired. Try Again!!!\";\n            error = new ErrorHandler(message,400);\n        }\n\n        return ServiceResponse.failure(error.message || \"Internal Server Error\", null, error.statusCode, res);\n    }\n}\n\n// HANDLE ERRORS BY ATTACHING STATUS CODE AND MESSAGES\nexport class ErrorHandler extends Error {\n    readonly statusCode: number;\n\n    constructor(message: string, statusCode: number){\n        super(message);\n        this.statusCode = statusCode;\n        Error.captureStackTrace(this, this.constructor);\n    }\n\n    static BadRequest(message: string) {\n        return new ErrorHandler(message, 400);\n    }\n    \n    static NotFound(message: string) {\n        return new ErrorHandler(message, 404);\n    }\n\n    static InternalServerError(message = \"Internal Server Error\") {\n        return new ErrorHandler(message, 500);\n    }\n}\n\n//CATCH ASYNCHRONOUS ERROS\nexport const asyncCatch = (handler: any) => (req: Request,res: Response,next: NextFunction)=>\n                               Promise.resolve( handler(req, res, next) )\n                                       .catch( next );\n\n\nexport default () => [unexpectedRequest, addErrorToRequestLog, returnErrorToUser];\n","import { z } from \"zod\"\n\nexport const createAgencySchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\"),\n    description: z.string().min(10, \"Description must be at least 10 characters\"),\n    contactEmail: z.string().email(\"Invalid email address\"),\n    serviceCategories: z.array(z.string()).min(1, \"At least one service category is required\"),\n})\n\nexport const updateAgencySchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional(),\n    description: z.string().min(10, \"Description must be at least 10 characters\").optional(),\n    contactEmail: z.string().email(\"Invalid email address\").optional(),\n    serviceCategories: z.array(z.string()).min(1, \"At least one service category is required\").optional(),\n})\n\nexport type CreateAgencyInput = z.infer<typeof createAgencySchema>\nexport type UpdateAgencyInput = z.infer<typeof updateAgencySchema>\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport jwt from \"jsonwebtoken\"\nimport { env } from \"@/config/envConfig\"\nimport { User } from \"@/routes/user/user.model\";\nimport type { UserRole } from \"@/utils/enums\";\nimport { asyncCatch, ErrorHandler } from \"@/middleware/errorHandler\"\n\ninterface JwtPayload {\n    id: string\n}\n\ndeclare global {\n    namespace Express {\n        interface Request {\n            user?: any\n        }\n    }\n}\n\nexport const protect = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Get token and check if it exists\n    let token\n    if (req.headers.authorization && req.headers.authorization.startsWith(\"Bearer\")) {\n        token = req.headers.authorization.split(\" \")[1]\n    }\n\n    if (!token) {\n        return next(new ErrorHandler(\"You are not logged in. Please log in to get access.\", StatusCodes.UNAUTHORIZED))\n    }\n\n    // 2) Verify token\n    const decoded = jwt.verify(token, env.JWT_SECRET) as JwtPayload\n\n    // 3) Check if user still exists\n    const user = await User.findById(decoded.id)\n    if (!user) {\n        return next(new ErrorHandler(\"The user belonging to this token no longer exists.\", StatusCodes.UNAUTHORIZED))\n    }\n\n    // 4) Grant access to protected route\n    req.user = user\n    next()\n})\n\nexport const restrictTo = (...roles: UserRole[]) => {\n    return (req: Request, res: Response, next: NextFunction) => {\n        if (!roles.includes(req.user.role)) {\n            return next(new ErrorHandler(\"You do not have permission to perform this action\", StatusCodes.FORBIDDEN))\n        }\n        next()\n    }\n}\n","import mongoose, { type Document, Schema } from \"mongoose\"\nimport { UserRole } from \"@/utils/enums\"\nimport bcrypt from \"bcryptjs\"\n\nexport interface IUser extends Document {\n    name: string\n    email: string\n    password: string\n    role: UserRole\n    createdAt: Date\n    updatedAt: Date\n    complaintsSubmitted: mongoose.Types.ObjectId[]\n    agencyId?: mongoose.Types.ObjectId\n    responses: mongoose.Types.ObjectId[]\n    resetPasswordToken?: string\n    resetPasswordExpires?: Date\n    comparePassword(candidatePassword: string): Promise<boolean>\n}\n\nconst userSchema = new Schema<IUser>(\n    {\n        name: {\n            type: String,\n            required: [true, \"Name is required\"],\n            trim: true,\n        },\n        email: {\n            type: String,\n            required: [true, \"Email is required\"],\n            unique: true,\n            lowercase: true,\n            trim: true,\n            validate: {\n                validator: (v: string) => /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v),\n                message: \"Please enter a valid email\",\n            },\n        },\n        agencyId: {\n            type: Schema.Types.ObjectId,\n            ref: \"Agency\",\n        },\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n            minlength: [8, \"Password must be at least 8 characters\"],\n            select: false,\n        },\n        role: {\n            type: String,\n            enum: Object.values(UserRole),\n            default: UserRole.CITIZEN,\n        },\n        complaintsSubmitted: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Complaint\",\n            },\n        ],\n        responses: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Response\",\n            },\n        ],\n        resetPasswordToken: String,\n        resetPasswordExpires: Date,\n    },\n    {\n        timestamps: true,\n    },\n)\n\n// Hash password before saving\nuserSchema.pre(\"save\", async function (next) {\n    if (!this.isModified(\"password\")) return next()\n\n    try {\n        const salt = await bcrypt.genSalt(10)\n        this.password = await bcrypt.hash(this.password, salt)\n        next()\n    } catch (error: any) {\n        next(error)\n    }\n})\n\n// Method to compare passwords\nuserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\n    return bcrypt.compare(candidatePassword, this.password)\n}\n\nexport const User = mongoose.model<IUser>(\"User\", userSchema)\n","export enum UserRole {\n  CITIZEN = \"CITIZEN\",\n  AGENCY_STAFF = \"AGENCY_STAFF\",\n  ADMIN = \"ADMIN\",\n}\n\nexport enum ComplaintStatus {\n  SUBMITTED = \"SUBMITTED\",\n  UNDER_REVIEW = \"UNDER_REVIEW\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  RESOLVED = \"RESOLVED\",\n  REJECTED = \"REJECTED\",\n  ESCALATED = \"ESCALATED\",\n}\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/utils/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        \"application/json\": {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\nexport function createApiReqestBody(schema: z.ZodTypeAny, type = \"application/json\") {\n    return {\n      content: {\n        [type]: {\n          schema: schema,\n        },\n      },\n    };\n  }\n","import { Router } from \"express\"\nimport { register, login, getMe, forgotPassword, resetPassword } from \"@/routes/auth/auth.controller\"\nimport { protect } from \"@/middleware/auth.middleware\"\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { createUserSchema, loginUserSchema, forgotPasswordSchema, resetPasswordSchema } from \"../user/user.schema\";\n\nconst router = Router()\nexport const registry = new OpenAPIRegistry();\n\n//REGISTRATION\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/auth/register\",\n    description: \"This route is for registering new user.\",\n    tags: [\"Authentication\"],\n    request: {\n        body: createApiReqestBody(createUserSchema),\n    },\n    responses: createApiResponse(createUserSchema, \"Success\"),\n});\nrouter.post(\"/register\", register)\n\n// LOGIN FORM\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/auth/login\",\n    description: \"This route is for logging in a user.\",\n    tags: [\"Authentication\"],\n    request: {\n        body: createApiReqestBody(loginUserSchema),\n    },\n    responses: createApiResponse(loginUserSchema, \"Success\"),\n});\nrouter.post(\"/login\", login)\n\n// FORGOT PASSWORD\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/auth/forgot-password\",\n    description: \"This route is for requesting a password reset.\",\n    tags: [\"Authentication\"],\n    request: {\n        body: createApiReqestBody(forgotPasswordSchema),\n    },\n    responses: createApiResponse(forgotPasswordSchema, \"Success\"),\n});\nrouter.post(\"/forgot-password\", forgotPassword)\n\n// RESET PASSWORD\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/auth/reset-password\",\n    description: \"This route is for resetting password with token.\",\n    tags: [\"Authentication\"],\n    request: {\n        body: createApiReqestBody(resetPasswordSchema),\n    },\n    responses: createApiResponse(resetPasswordSchema, \"Success\"),\n});\nrouter.post(\"/reset-password\", resetPassword)\n\n//LOGGED INFORMATION\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/auth/me\",\n    description: \"This route is for getting loggin user information.\",\n    tags: [\"Authentication\"],\n    security: [{ authorization: [] }],\n    responses: createApiResponse(loginUserSchema, \"Success\"),\n});\nrouter.get(\"/me\", protect, getMe)\n\nexport default router\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport jwt from \"jsonwebtoken\"\nimport crypto from \"crypto\"\nimport { env } from \"@/config/envConfig\"\nimport { User } from \"@/routes/user/user.model\"\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\"\nimport { createUserSchema, loginUserSchema, forgotPasswordSchema, resetPasswordSchema } from \"@/routes/user/user.schema\"\nimport { sendEmail } from \"@/utils/email\"\n\nconst signToken = (id: any) => {\n    return jwt.sign({ id }, env.JWT_SECRET as any, {\n        expiresIn: env.JWT_EXPIRES_IN as any,\n    })\n}\n\nexport const register = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = createUserSchema.parse(req.body);\n\n    // 2) Check if user already exists\n    const existingUser = await User.findOne({ email: validatedData.email })\n    if (existingUser) {\n        return next(new ErrorHandler(\"Email already in use\", StatusCodes.CONFLICT))\n    }\n\n    // 3) Create user\n    const newUser = await User.create(validatedData) as typeof User.prototype\n\n    // 4) Generate JWT\n    const token = signToken((newUser._id as string).toString())\n\n    // 5) Send response\n    res.status(StatusCodes.CREATED).json({\n        status: \"success\",\n        token,\n        data: {\n        user: {\n            id: newUser._id,\n            name: newUser.name,\n            email: newUser.email,\n            role: newUser.role,\n        },\n        },\n    })\n})\n\nexport const login = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = loginUserSchema.parse(req.body)\n\n    // 2) Check if user exists & password is correct\n    const user = await User.findOne({ email: validatedData.email }).select(\"+password\") as (typeof User.prototype & { _id: string })\n    if (!user || !(await user.comparePassword(validatedData.password))) {\n        return next(new ErrorHandler(\"Incorrect email or password\", StatusCodes.UNAUTHORIZED))\n    }\n\n    // 3) Generate JWT\n    const token = signToken(user._id.toString())\n\n    // 4) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        token,\n        data: {\n        user: {\n            id: user._id,\n            name: user.name,\n            email: user.email,\n            role: user.role,\n        },\n        },\n    })\n})\n\nexport const getMe = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n  res.status(StatusCodes.OK).json({\n    status: \"success\",\n    data: {\n      user: req.user,\n    },\n  })\n})\n\nexport const forgotPassword = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = forgotPasswordSchema.parse(req.body)\n\n    // 2) Check if user exists\n    const user = await User.findOne({ email: validatedData.email })\n    if (!user) {\n        return next(new ErrorHandler(\"No user found with that email address\", StatusCodes.NOT_FOUND))\n    }\n\n    // 3) Generate random reset token\n    const resetToken = crypto.randomBytes(32).toString(\"hex\")\n    user.resetPasswordToken = crypto\n        .createHash(\"sha256\")\n        .update(resetToken)\n        .digest(\"hex\")\n    user.resetPasswordExpires = new Date(Date.now() + 60 * 60 * 1000) // 1 hour\n\n    await user.save({ validateBeforeSave: false })\n\n    // 4) Send reset email\n    const resetURL = `${env.CORS_ORIGIN}/reset-password/${resetToken}`\n    const message = `Forgot your password? Submit a PATCH request with your new password to: ${resetURL}.\\nIf you didn't forget your password, please ignore this email!`\n\n    try {\n        await sendEmail({\n            email: user.email,\n            subject: \"Your password reset token (valid for 1 hour)\",\n            message,\n        })\n\n        res.status(StatusCodes.OK).json({\n            status: \"success\",\n            message: \"Token sent to email!\",\n        })\n    } catch (err) {\n        user.resetPasswordToken = undefined\n        user.resetPasswordExpires = undefined\n        await user.save({ validateBeforeSave: false })\n\n        return next(new ErrorHandler(\"There was an error sending the email. Try again later!\", StatusCodes.INTERNAL_SERVER_ERROR))\n    }\n})\n\nexport const resetPassword = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = resetPasswordSchema.parse(req.body)\n\n    // 2) Get user based on the token\n    const hashedToken = crypto\n        .createHash(\"sha256\")\n        .update(validatedData.token)\n        .digest(\"hex\")\n\n    const user = await User.findOne({\n        resetPasswordToken: hashedToken,\n        resetPasswordExpires: { $gt: Date.now() },\n    }) as (typeof User.prototype & { _id: string })\n\n    if (!user) {\n        return next(new ErrorHandler(\"Token is invalid or has expired\", StatusCodes.BAD_REQUEST))\n    }\n\n    // 3) Update password\n    user.password = validatedData.password\n    user.resetPasswordToken = undefined\n    user.resetPasswordExpires = undefined\n    await user.save()\n\n    // 4) Log the user in, send JWT\n    const token = signToken(user._id.toString())\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        token,\n        data: {\n            user: {\n                id: user._id,\n                name: user.name,\n                email: user.email,\n                role: user.role,\n            },\n        },\n    })\n})\n","import { z } from \"zod\"\nimport { UserRole } from \"@/utils/enums\"\n\nexport const createUserSchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\"),\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    role: z.nativeEnum(UserRole).optional(),\n})\n\nexport const loginUserSchema = z.object({\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(1, \"Password is required\"),\n})\n\nexport const updateUserSchema = z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional(),\n    email: z.string().email(\"Invalid email address\").optional(),\n    password: z.string().min(8, \"Password must be at least 8 characters\").optional(),\n    role: z.nativeEnum(UserRole).optional(),\n})\n\nexport const forgotPasswordSchema = z.object({\n    email: z.string().email(\"Invalid email address\"),\n})\n\nexport const resetPasswordSchema = z.object({\n    token: z.string(),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n})\n\nexport type CreateUserInput = z.infer<typeof createUserSchema>\nexport type LoginUserInput = z.infer<typeof loginUserSchema>\nexport type UpdateUserInput = z.infer<typeof updateUserSchema>\nexport type ForgotPasswordInput = z.infer<typeof forgotPasswordSchema>\nexport type ResetPasswordInput = z.infer<typeof resetPasswordSchema>\n","import nodemailer from \"nodemailer\"\nimport { env } from \"@/config/envConfig\"\n\ninterface EmailOptions {\n    email: string\n    subject: string\n    message: string\n}\n\nexport const sendEmail = async (options: EmailOptions) => {\n    // 1) Create a transporter\n    const transporter = nodemailer.createTransport({\n        host: env.SMTP_HOST,\n        port: env.SMTP_PORT,\n        auth: {\n            user: env.SMTP_USER,\n            pass: env.SMTP_PASS,\n        },\n    })\n\n    // 2) Define the email options\n    const mailOptions = {\n        from: env.SMTP_FROM,\n        to: options.email,\n        subject: options.subject,\n        text: options.message,\n    }\n\n    // 3) Actually send the email\n    await transporter.sendMail(mailOptions)\n} ","import { Router } from \"express\"\nimport {\n    createComplaint,\n    getAllComplaints,\n    getComplaint,\n    updateComplaint,\n    deleteComplaint,\n    updateComplaintStatus,\n} from \"@/routes/complaint/complaint.controller\"\nimport { protect, restrictTo } from \"@/middleware/auth.middleware\"\nimport { UserRole } from \"@/utils/enums\"\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\"\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\"\nimport { createComplaintSchema } from \"./complaint.schema\"\nimport { z } from 'zod';\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\n\nextendZodWithOpenApi(z);\n\nconst router = Router()\nexport const registry = new OpenAPIRegistry();\n\n// Register security scheme\nregistry.registerComponent(\"securitySchemes\", \"Authorization\", {\n    type: \"http\",\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    name: \"Authorization\",\n    in: \"header\",\n    description: \"JWT Authorization header using the Bearer scheme. Example:\"\n});\n\nrouter.use(protect) // All complaint routes require authentication\n\n// CREATE COMPLAINT\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/complaints\",\n    description: \"This route is for sending complaints.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    request: {\n        body: createApiReqestBody(createComplaintSchema),\n    },\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\nrouter.route(\"/\").post(createComplaint).get(getAllComplaints)\n\n// GET ALL COMPLAINTS\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/complaints\",\n    description: \"Get all complaints.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\n\n//GET COMPLAINT BY ID, UPDATE COMPLAINT, DELETE COMPLAINT\nrouter\n    .route(\"/:id\")\n    .get(getComplaint)\n    .patch(updateComplaint)\n    .delete(restrictTo(UserRole.CITIZEN, UserRole.ADMIN), deleteComplaint);\n\n// GET COMPLAINT BY ID\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/complaints/{id}\",\n    description: \"Get a specific complaint by ID.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\n\n// UPDATE COMPLAINT\nregistry.registerPath({\n    method: \"patch\",\n    path: \"/api/complaints/{id}\",\n    description: \"Update a specific complaint by ID.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    request: {\n        params: z.object({ id: z.string() }),\n        body: createApiReqestBody(createComplaintSchema),\n    },\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\n\n// DELETE COMPLAINT\nregistry.registerPath({\n    method: \"delete\",\n    path: \"/api/complaints/{id}\",\n    description: \"Delete a specific complaint by ID.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\n\n// UPDATE COMPLAINT STATUS\nregistry.registerPath({\n    method: \"patch\",\n    path: \"/api/complaints/{id}/status\",\n    description: \"Update the status of a specific complaint by ID.\",\n    tags: [\"Complaints\"],\n    security: [{ Authorization: [] }],\n    request: {\n        params: z.object({ id: z.string() }),\n        body: createApiReqestBody(z.object({\n            status: z.enum(['SUBMITTED', 'UNDER_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED', 'ESCALATED'])\n        })),\n    },\n    responses: createApiResponse(createComplaintSchema, \"Success\"),\n});\n\n// Add the new route\nrouter.patch(\"/:id/status\", restrictTo(UserRole.AGENCY_STAFF, UserRole.ADMIN), updateComplaintStatus);\n\nexport default router\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport { Complaint } from \"@/routes/complaint/complaint.model\"\nimport { User } from \"@/routes/user/user.model\"\nimport { Agency } from \"@/routes/agency/agency.model\"\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\"\nimport { createComplaintSchema, updateComplaintSchema } from \"@/routes/complaint/complaint.schema\";\nimport { UserRole } from \"@/utils/enums\";\nimport { z } from \"zod\";\n\nexport const createComplaint = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = createComplaintSchema.parse(req.body)\n\n    // 2) Check if agency exists if provided\n    if (validatedData.handledBy) {\n        const agency = await Agency.findById(validatedData.handledBy)\n        if (!agency) {\n            return next(new ErrorHandler(\"Agency not found\", StatusCodes.NOT_FOUND))\n        }\n    }\n\n    // 3) Create complaint\n    const newComplaint = await Complaint.create({\n        ...validatedData,\n        submittedBy: req.user._id,\n    })\n\n    // 4) Update user's complaints\n    await User.findByIdAndUpdate(req.user._id, {\n        $push: { complaintsSubmitted: newComplaint._id },\n    })\n\n    // 5) Send response\n    res.status(StatusCodes.CREATED).json({\n        status: \"success\",\n        data: {\n        complaint: newComplaint,\n        },\n    })\n})\n\nexport const getAllComplaints = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // Different queries based on user role\n    let query = {}\n\n    if (req.user.role === UserRole.CITIZEN) {\n        // Citizens can only see their own complaints\n        query = { submittedBy: req.user._id }\n    } else if (req.user.role === UserRole.AGENCY_STAFF) {\n        // Agency staff can see complaints handled by their agency\n        const agency = await Agency.findOne({ contactEmail: req.user.email }) as { _id: string } | null\n        if (!agency) {\n        return next(new ErrorHandler(\"Agency not found for this staff member\", StatusCodes.NOT_FOUND))\n        }\n        query = { handledBy: agency._id }\n    }\n    // Admins can see all complaints (empty query)\n\n    // Apply filters from query params\n    if (req.query.category) {\n        query = { ...query, category: req.query.category }\n    }\n    if (req.query.status) {\n        query = { ...query, status: req.query.status }\n    }\n\n    // Execute query with pagination\n    const page = Number.parseInt(req.query.page as string) || 1\n    const limit = Number.parseInt(req.query.limit as string) || 10\n    const skip = (page - 1) * limit\n\n    const complaints = await Complaint.find(query)\n        .populate(\"submittedBy\", \"name email\")\n        .populate(\"handledBy\", \"name contactEmail\")\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n\n    const total = await Complaint.countDocuments(query)\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        results: complaints.length,\n        total,\n        data: {\n        complaints,\n        },\n    })\n})\n\nexport const getComplaint = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const complaint = await Complaint.findById(req.params.id)\n        .populate(\"submittedBy\", \"name email\")\n        .populate(\"handledBy\", \"name contactEmail\")\n        .populate(\"responses\")\n        .populate(\"attachments\")\n\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // Check if user has permission to view this complaint\n    if (req.user.role === UserRole.CITIZEN && complaint.submittedBy._id.toString() !== req.user._id.toString()) {\n        return next(new ErrorHandler(\"You do not have permission to view this complaint\", StatusCodes.FORBIDDEN))\n    }\n\n    if (req.user.role === UserRole.AGENCY_STAFF) {\n        const agency = await Agency.findOne({ contactEmail: req.user.email }) as { _id: string } | null\n        if (!agency || (complaint.handledBy && complaint.handledBy._id.toString() !== agency._id.toString())) {\n        return next(new ErrorHandler(\"You do not have permission to view this complaint\", StatusCodes.FORBIDDEN))\n        }\n    }\n\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        complaint,\n        },\n    })\n})\n\nexport const updateComplaint = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = updateComplaintSchema.parse(req.body)\n\n    // 2) Get complaint\n    const complaint = await Complaint.findById(req.params.id)\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 3) Check permissions\n    if (req.user.role === UserRole.CITIZEN) {\n        // Citizens can only update their own complaints and only if status is SUBMITTED\n        if (complaint.submittedBy.toString() !== req.user._id.toString()) {\n            return next(new ErrorHandler(\"You do not have permission to update this complaint\", StatusCodes.FORBIDDEN))\n        }\n        if (complaint.status !== \"SUBMITTED\") {\n            return next(new ErrorHandler(\"You can only update complaints with SUBMITTED status\", StatusCodes.FORBIDDEN))\n        }\n        \n        // Citizens can't update status or handledBy\n        delete validatedData.status\n        delete validatedData.handledBy\n    } else if (req.user.role === UserRole.AGENCY_STAFF) {\n\n        // Agency staff can only update complaints handled by their agency\n        const agency = await Agency.findOne({ contactEmail: req.user.email }) as { _id: string } | null\n        if (!agency || (complaint.handledBy && complaint.handledBy.toString() !== agency?._id.toString())) {\n            return next(new ErrorHandler(\"You do not have permission to update this complaint\", StatusCodes.FORBIDDEN))\n        }\n\n        // Agency staff can only update status\n        const allowedUpdates = [\"status\"]\n        Object.keys(validatedData).forEach((key) => {\n            if (!allowedUpdates.includes(key)) {\n                delete validatedData[key as keyof typeof validatedData]\n            }\n        })\n    }\n\n    // 4) Update complaint\n    const updatedComplaint = await Complaint.findByIdAndUpdate(req.params.id, validatedData, {\n        new: true,\n        runValidators: true,\n    })\n        .populate(\"submittedBy\", \"name email\")\n        .populate(\"handledBy\", \"name contactEmail\")\n\n    // 5) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n        complaint: updatedComplaint,\n        },\n    })\n})\n\nexport const deleteComplaint = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Get complaint\n    const complaint = await Complaint.findById(req.params.id)\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 2) Check permissions\n    if (req.user.role === UserRole.CITIZEN) {\n        // Citizens can only delete their own complaints and only if status is SUBMITTED\n        if (complaint.submittedBy.toString() !== req.user._id.toString()) {\n        return next(new ErrorHandler(\"You do not have permission to delete this complaint\", StatusCodes.FORBIDDEN))\n        }\n        if (complaint.status !== \"SUBMITTED\") {\n        return next(new ErrorHandler(\"You can only delete complaints with SUBMITTED status\", StatusCodes.FORBIDDEN))\n        }\n    } else if (req.user.role === UserRole.AGENCY_STAFF) {\n        // Agency staff cannot delete complaints\n        return next(new ErrorHandler(\"Agency staff cannot delete complaints\", StatusCodes.FORBIDDEN))\n    }\n\n    // 3) Delete complaint\n    await Complaint.findByIdAndDelete(req.params.id)\n\n    // 4) Update user's complaints\n    await User.findByIdAndUpdate(complaint.submittedBy, {\n        $pull: { complaintsSubmitted: complaint._id },\n    })\n\n    // 5) Send response\n    res.status(StatusCodes.NO_CONTENT).json({\n        status: \"success\",\n        data: null,\n    })\n})\n\nexport const updateComplaintStatus = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const statusSchema = z.object({\n        status: z.enum(['SUBMITTED', 'UNDER_REVIEW', 'IN_PROGRESS', 'RESOLVED', 'REJECTED', 'ESCALATED'])\n    });\n    const validatedData = statusSchema.parse(req.body);\n\n    // 2) Get complaint\n    const complaint = await Complaint.findById(req.params.id);\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND));\n    }\n\n    // 3) Check permissions\n    if (req.user.role === UserRole.CITIZEN) {\n        return next(new ErrorHandler(\"Citizens cannot update complaint status\", StatusCodes.FORBIDDEN));\n    }\n\n    if (req.user.role === UserRole.AGENCY_STAFF) {\n        // Agency staff can only update complaints handled by their agency\n        const agency = await Agency.findOne({ contactEmail: req.user.email }) as { _id: string } | null;\n        if (!agency || (complaint.handledBy && complaint.handledBy.toString() !== agency?._id.toString())) {\n            return next(new ErrorHandler(\"You do not have permission to update this complaint\", StatusCodes.FORBIDDEN));\n        }\n    }\n\n    // 4) Update complaint status\n    const updatedComplaint = await Complaint.findByIdAndUpdate(\n        req.params.id,\n        { status: validatedData.status },\n        {\n            new: true,\n            runValidators: true,\n        }\n    )\n    .populate(\"submittedBy\", \"name email\")\n    .populate(\"handledBy\", \"name contactEmail\");\n\n    // 5) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        data: {\n            complaint: updatedComplaint,\n        },\n    });\n});\n","import mongoose, { type Document, Schema } from \"mongoose\"\nimport { ComplaintStatus } from \"@/utils/enums\"\n\nexport interface IComplaint extends Document {\n    title: string\n    description: string\n    location: string\n    status: ComplaintStatus\n    createdAt: Date\n    updatedAt: Date\n    submittedBy: mongoose.Types.ObjectId\n    handledBy: mongoose.Types.ObjectId\n    attachments: mongoose.Types.ObjectId[]\n    responses: mongoose.Types.ObjectId[]\n}\n\nconst complaintSchema = new Schema<IComplaint>(\n    {\n        title: {\n            type: String,\n            required: [true, \"Title is required\"],\n            trim: true,\n        },\n        description: {\n            type: String,\n            required: [true, \"Description is required\"],\n        },\n        location: {\n            type: String,\n            required: [true, \"Location is required\"],\n        },\n        status: {\n            type: String,\n            enum: Object.values(ComplaintStatus),\n            default: ComplaintStatus.SUBMITTED,\n        },\n        submittedBy: {\n            type: Schema.Types.ObjectId,\n            ref: \"User\",\n        },\n        handledBy: {\n            type: Schema.Types.ObjectId,\n            ref: \"Agency\",\n        },\n        attachments: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: \"Attachment\",\n        },\n        ],\n        responses: [\n        {\n            type: Schema.Types.ObjectId,\n            ref: \"Response\",\n        },\n        ],\n    },\n    {\n        timestamps: true,\n    },\n)\n\n// Index for faster queries\ncomplaintSchema.index({ category: 1, status: 1 })\ncomplaintSchema.index({ submittedBy: 1 })\ncomplaintSchema.index({ handledBy: 1 })\n\nexport const Complaint = mongoose.model<IComplaint>(\"Complaint\", complaintSchema)\n","import { z } from \"zod\"\nimport { ComplaintStatus } from \"@/utils/enums\"\n\nexport const createComplaintSchema = z.object({\n    title: z.string().min(5, \"Title must be at least 5 characters\"),\n    description: z.string().min(10, \"Description must be at least 10 characters\"),\n    location: z.string().min(3, \"Location must be at least 3 characters\"),\n    handledBy: z.string().optional(),\n})\n\nexport const updateComplaintSchema = z.object({\n    title: z.string().min(5, \"Title must be at least 5 characters\").optional(),\n    description: z.string().min(10, \"Description must be at least 10 characters\").optional(),\n    location: z.string().min(3, \"Location must be at least 3 characters\").optional(),\n    status: z.nativeEnum(ComplaintStatus).optional(),\n    handledBy: z.string().optional(),\n})\n\nexport type CreateComplaintInput = z.infer<typeof createComplaintSchema>\nexport type UpdateComplaintInput = z.infer<typeof updateComplaintSchema>\n","import { Router } from \"express\";\nimport { getAllUsers, getUserById, updateUser, deleteUser } from './user.controller';\nimport { protect } from \"@/middleware/auth.middleware\";\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { updateUserSchema } from \"./user.schema\";\nimport { z } from 'zod';\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\n\nextendZodWithOpenApi(z);\n\nconst router = Router();\nexport const registry = new OpenAPIRegistry();\n\n// Register security scheme\nregistry.registerComponent(\"securitySchemes\", \"Authorization\", {\n    type: \"http\",\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    name: \"Authorization\",\n    in: \"header\",\n    description: \"JWT Authorization header using the Bearer scheme. Example:\"\n});\n\n// GET ALL USERS\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/users\",\n    description: \"Get all users (admin only)\",\n    tags: [\"Users\"],\n    security: [{ Authorization: [] }],\n    responses: createApiResponse(updateUserSchema, \"Success\"),\n});\nrouter.get(\n    '/',\n    protect,\n    getAllUsers\n);\n\n// GET USER BY ID\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/users/{id}\",\n    description: \"Get user by ID (admin only)\",\n    tags: [\"Users\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: createApiResponse(updateUserSchema, \"Success\"),\n});\nrouter.get(\n    '/:id',\n    protect,\n    getUserById\n);\n\n// UPDATE USER\nregistry.registerPath({\n    method: \"put\",\n    path: \"/api/users/{id}\",\n    description: \"Update user information (admin only)\",\n    tags: [\"Users\"],\n    security: [{ Authorization: [] }],\n    request: {\n        params: z.object({ id: z.string() }),\n        body: createApiReqestBody(updateUserSchema),\n    },\n    responses: createApiResponse(updateUserSchema, \"Success\"),\n});\nrouter.put(\n    '/:id',\n    protect,\n    updateUser\n);\n\n// DELETE USER\nregistry.registerPath({\n    method: \"delete\",\n    path: \"/api/users/{id}\",\n    description: \"Delete a user (admin only)\",\n    tags: [\"Users\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ id: z.string() }) },\n    responses: {\n        \"200\": {\n            description: \"User deleted successfully\",\n            content: {\n                \"application/json\": {\n                    schema: {\n                        type: \"object\",\n                        properties: {\n                            success: { type: \"boolean\" },\n                            message: { type: \"string\" }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\nrouter.delete(\n    '/:id',\n    protect,\n    deleteUser\n);\n\nexport default router; ","import { Request, Response, NextFunction } from 'express';\nimport { User } from '@/routes/user/user.model';\nimport { UserRole } from '@/utils/enums';\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\";\n\nexport const getAllUsers = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const users = await User.find().select('-password');\n    res.status(200).json({\n        success: true,\n        data: {\n            users\n        }\n    });\n});\n\nexport const getUserById = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const user = await User.findById(req.params.id).select('-password');\n    \n    if (!user) {\n        return next(new ErrorHandler('User not found', 404));\n    }\n\n    res.status(200).json({\n        success: true,\n        data: {\n            user\n        }\n    });\n});\n\nexport const updateUser = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const { name, email, role } = req.body;\n    const userId = req.params.id;\n\n    // Check if user exists\n    const user = await User.findById(userId);\n    if (!user) {\n        return next(new ErrorHandler('User not found', 404));\n    }\n\n    // Validate role if provided\n    if (role && !Object.values(UserRole).includes(role)) {\n        return next(new ErrorHandler('Invalid role', 400));\n    }\n\n    // Check if email is already taken by another user\n    if (email && email !== user.email) {\n        const existingUser = await User.findOne({ email });\n        if (existingUser) {\n            return next(new ErrorHandler('Email is already taken', 400));\n        }\n    }\n\n    // Update user\n    const updatedUser = await User.findByIdAndUpdate(\n        userId,\n        {\n            name: name || user.name,\n            email: email || user.email,\n            role: role || user.role\n        },\n        { new: true }\n    ).select('-password');\n\n    res.status(200).json({\n        success: true,\n        data: {\n            user: updatedUser\n        }\n    });\n});\n\nexport const deleteUser = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = req.params.id;\n\n    // Check if user exists\n    const user = await User.findById(userId);\n    if (!user) {\n        return next(new ErrorHandler('User not found', 404));\n    }\n\n    // Prevent self-deletion\n    if (userId === req.user._id.toString()) {\n        return next(new ErrorHandler('You cannot delete your own account', 400));\n    }\n\n    // Delete user\n    await User.findByIdAndDelete(userId);\n\n    res.status(200).json({\n        success: true,\n        message: 'User deleted successfully'\n    });\n}); ","import { Router } from \"express\"\nimport { createResponse, getResponses } from \"@/routes/response/response.controller\"\nimport { protect } from \"@/middleware/auth.middleware\";\nimport { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport { createApiReqestBody, createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { createResponseSchema } from \"./response.schema\";\nimport { z } from 'zod';\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\n\nextendZodWithOpenApi(z);\n\nconst router = Router()\nexport const registry = new OpenAPIRegistry();\n\n// Register security scheme\nregistry.registerComponent(\"securitySchemes\", \"Authorization\", {\n    type: \"http\",\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    name: \"Authorization\",\n    in: \"header\",\n    description: \"JWT Authorization header using the Bearer scheme. Example:\"\n});\n\nrouter.use(protect) // All response routes require authentication\n\n// CREATE RESPONSE\nregistry.registerPath({\n    method: \"post\",\n    path: \"/api/responses\",\n    description: \"Create a new response to a complaint\",\n    tags: [\"Responses\"],\n    security: [{ Authorization: [] }],\n    request: {\n        body: createApiReqestBody(createResponseSchema),\n    },\n    responses: createApiResponse(createResponseSchema, \"Success\"),\n});\nrouter.post(\"/\", createResponse)\n\n// GET RESPONSES BY COMPLAINT ID\nregistry.registerPath({\n    method: \"get\",\n    path: \"/api/responses/complaint/{complaintId}\",\n    description: \"Get all responses for a specific complaint\",\n    tags: [\"Responses\"],\n    security: [{ Authorization: [] }],\n    request: { params: z.object({ complaintId: z.string() }) },\n    responses: createApiResponse(createResponseSchema, \"Success\"),\n});\nrouter.get(\"/complaint/:complaintId\", getResponses)\n\nexport default router\n","import type { Request, Response, NextFunction } from \"express\"\nimport { StatusCodes } from \"http-status-codes\"\nimport { Response as ResponseModel } from \"@/routes/response/response.model\"\nimport { Complaint } from \"@/routes/complaint/complaint.model\"\nimport { User } from \"@/routes/user/user.model\"\nimport { Agency } from \"@/routes/agency/agency.model\"\nimport { ErrorHandler, asyncCatch } from \"@/middleware/errorHandler\";\nimport { createResponseSchema } from \"@/routes/response/response.schema\";\nimport { UserRole } from \"@/utils/enums\";\n\nexport const createResponse = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Validate input\n    const validatedData = createResponseSchema.parse(req.body)\n\n    // 2) Check if complaint exists\n    const complaint = await Complaint.findById(validatedData.complaint)\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 3) Check permissions\n    if (req.user.role === UserRole.CITIZEN) {\n        // Citizens can only respond to their own complaints\n        if (complaint.submittedBy.toString() !== req.user._id.toString()) {\n            return next(new ErrorHandler(\"You do not have permission to respond to this complaint\", StatusCodes.FORBIDDEN))\n        }\n        // Citizens can't add internal notes\n        delete validatedData.internalNotes\n    } else if (req.user.role === UserRole.AGENCY_STAFF) {\n        // Agency staff can only respond to complaints handled by their agency\n        const agency = await Agency.findOne({ contactEmail: req.user.email }) as { _id: string } | null;\n        if (!agency || (complaint.handledBy && complaint.handledBy.toString() !== agency._id)) {\n            return next(new ErrorHandler(\"You do not have permission to respond to this complaint\", StatusCodes.FORBIDDEN))\n        }\n    }\n\n    // 4) Create response\n    const newResponse = await ResponseModel.create({\n        ...validatedData,\n        createdBy: req.user._id,\n    })\n\n    // 5) Update complaint and user\n    await Complaint.findByIdAndUpdate(validatedData.complaint, {\n        $push: { responses: newResponse._id },\n    })\n\n    await User.findByIdAndUpdate(req.user._id, {\n        $push: { responses: newResponse._id },\n    })\n\n    // 6) Send response\n    res.status(StatusCodes.CREATED).json({\n        status: \"success\",\n        data: {\n        response: newResponse,\n        },\n    })\n})\n\nexport const getResponses = asyncCatch(async (req: Request, res: Response, next: NextFunction) => {\n    // 1) Check if complaint exists\n    const complaint = await Complaint.findById(req.params.complaintId)\n    if (!complaint) {\n        return next(new ErrorHandler(\"Complaint not found\", StatusCodes.NOT_FOUND))\n    }\n\n    // 2) Check permissions\n    if (req.user.role === UserRole.CITIZEN) {\n        // Citizens can only view responses to their own complaints\n        if (complaint.submittedBy.toString() !== req.user._id.toString()) {\n            return next(new ErrorHandler(\"You do not have permission to view these responses\", StatusCodes.FORBIDDEN))\n        }\n    } else if (req.user.role === UserRole.AGENCY_STAFF) {\n        // Agency staff can only view responses to complaints handled by their agency\n        const agency = await Agency.findOne({ contactEmail: req.user.email })\n        if (!agency || (complaint.handledBy && complaint.handledBy.toString() !== (agency as any)._id.toString())) {\n            return next(new ErrorHandler(\"You do not have permission to view these responses\", StatusCodes.FORBIDDEN))\n        }\n    }\n\n    // 3) Get responses\n    const responses = await ResponseModel.find({ complaint: req.params.complaintId })\n        .populate(\"createdBy\", \"name email role\")\n        .sort({ createdAt: -1 })\n\n    // 4) Filter internal notes for citizens\n    let filteredResponses = responses\n    if (req.user.role === UserRole.CITIZEN) {\n        filteredResponses = responses.map((response: typeof ResponseModel.prototype) => {\n            const responseObj = response.toObject()\n            delete responseObj.internalNotes\n            return responseObj\n        })\n    }\n\n    // 5) Send response\n    res.status(StatusCodes.OK).json({\n        status: \"success\",\n        results: filteredResponses.length,\n        data: {\n            responses: filteredResponses,\n        },\n    })\n})\n","import mongoose, { type Document, Schema } from \"mongoose\"\n\nexport interface IResponse extends Document {\n  message: string\n  internalNotes?: string\n  createdAt: Date\n  createdBy: mongoose.Types.ObjectId\n  complaint: mongoose.Types.ObjectId\n}\n\nconst responseSchema = new Schema<IResponse>(\n  {\n    message: {\n      type: String,\n      required: [true, \"Response message is required\"],\n    },\n    internalNotes: {\n      type: String,\n    },\n    createdBy: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: [true, \"User reference is required\"],\n    },\n    complaint: {\n      type: Schema.Types.ObjectId,\n      ref: \"Complaint\",\n      required: [true, \"Complaint reference is required\"],\n    },\n  },\n  {\n    timestamps: true,\n  },\n)\n\nexport const Response = mongoose.model<IResponse>(\"Response\", responseSchema)\n","import { z } from \"zod\"\n\nexport const createResponseSchema = z.object({\n  message: z.string().min(1, \"Message is required\"),\n  internalNotes: z.string().optional(),\n  complaint: z.string(),\n})\n\nexport type CreateResponseInput = z.infer<typeof createResponseSchema>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAAuB;;;ACCvB,IAAAA,4BAA4B;;;ACD5B,sBAAgD;AAShD,IAAM,eAAe,IAAI;AAAA,EACvB;AAAA,IACE,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,yBAAyB;AAAA,MAC1C,MAAM;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,gCAAgC;AAAA,IACnD;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,2BAA2B;AAAA,MAC5C,WAAW;AAAA,MACX,UAAU;AAAA,QACR,WAAW,CAAC,MAAc,8CAA8C,KAAK,CAAC;AAAA,QAC9E,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,MACjB;AAAA,QACE,MAAM;AAAA,QACN,UAAU,CAAC,MAAM,2CAA2C;AAAA,MAC9D;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,YAAY;AAAA,EACd;AACF;AAEO,IAAM,SAAS,gBAAAC,QAAS,MAAe,UAAU,YAAY;;;AC1CpE,oBAAmB;AACnB,qBAAyD;AAEzD,cAAAC,QAAO,OAAO;AAEP,IAAM,UAAM,yBAAS,QAAQ,KAAK;AAAA,EACrC,cAAU,oBAAI,EAAE,gBAAY,yBAAS,MAAM,GAAG,SAAS,CAAC,eAAe,cAAc,MAAM,EAAE,CAAC;AAAA,EAC9F,UAAM,qBAAK,EAAE,gBAAY,yBAAS,WAAW,EAAE,CAAC;AAAA,EAChD,UAAM,qBAAK,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EACzC,iBAAa,oBAAI,EAAE,MAAM,4BAA4B,CAAC;AAAA,EACtD,gBAAY,oBAAI,EAAE,MAAM,qBAAqB,CAAC;AAAA,EAC9C,oBAAgB,oBAAI,EAAE,SAAS,MAAM,MAAM,sBAAsB,CAAC;AAAA,EAClE,iBAAa,oBAAI,EAAE,gBAAY,yBAAS,uBAAuB,EAAE,CAAC;AAAA,EAClE,oCAAgC,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EAClE,iCAA6B,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnE,CAAC;;;ACrBD,+BAA4B;;;ACC5B,IAAAC,4BAA4B;AAC5B,iBAAkB;AA0BX,IAAM,wBAAwB,CAAyB,eAC5D,aAAE,OAAO;AAAA,EACP,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACvB,CAAC;;;AC0CI,IAAM,eAAN,MAAM,sBAAqB,MAAM;AAAA,EAC3B;AAAA,EAET,YAAY,SAAiB,YAAmB;AAC5C,UAAM,OAAO;AACb,SAAK,aAAa;AAClB,UAAM,kBAAkB,MAAM,KAAK,WAAW;AAAA,EAClD;AAAA,EAEA,OAAO,WAAW,SAAiB;AAC/B,WAAO,IAAI,cAAa,SAAS,GAAG;AAAA,EACxC;AAAA,EAEA,OAAO,SAAS,SAAiB;AAC7B,WAAO,IAAI,cAAa,SAAS,GAAG;AAAA,EACxC;AAAA,EAEA,OAAO,oBAAoB,UAAU,yBAAyB;AAC1D,WAAO,IAAI,cAAa,SAAS,GAAG;AAAA,EACxC;AACJ;AAGO,IAAM,aAAa,CAAC,YAAiB,CAAC,KAAa,KAAc,SACzC,QAAQ,QAAS,QAAQ,KAAK,KAAK,IAAI,CAAE,EAChC,MAAO,IAAK;;;ACtGpD,IAAAC,cAAkB;AAEX,IAAM,qBAAqB,cAAE,OAAO;AAAA,EACvC,MAAM,cAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC;AAAA,EAC5D,aAAa,cAAE,OAAO,EAAE,IAAI,IAAI,4CAA4C;AAAA,EAC5E,cAAc,cAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EACtD,mBAAmB,cAAE,MAAM,cAAE,OAAO,CAAC,EAAE,IAAI,GAAG,2CAA2C;AAC7F,CAAC;AAEM,IAAM,qBAAqB,cAAE,OAAO;AAAA,EACvC,MAAM,cAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC,EAAE,SAAS;AAAA,EACvE,aAAa,cAAE,OAAO,EAAE,IAAI,IAAI,4CAA4C,EAAE,SAAS;AAAA,EACvF,cAAc,cAAE,OAAO,EAAE,MAAM,uBAAuB,EAAE,SAAS;AAAA,EACjE,mBAAmB,cAAE,MAAM,cAAE,OAAO,CAAC,EAAE,IAAI,GAAG,2CAA2C,EAAE,SAAS;AACxG,CAAC;;;ANRM,IAAM,eAAe,WAAW,OAAO,KAAc,KAAe,SAAuB;AAE9F,QAAM,gBAAgB,mBAAmB,MAAM,IAAI,IAAI;AAGvD,QAAM,iBAAiB,MAAM,OAAO,QAAQ,EAAE,MAAM,cAAc,KAAK,CAAC;AACxE,MAAI,gBAAgB;AAChB,WAAO,KAAK,IAAI,aAAa,wCAAwC,sCAAY,QAAQ,CAAC;AAAA,EAC9F;AAGA,QAAM,YAAY,MAAM,OAAO,OAAO,aAAa;AAGnD,MAAI,OAAO,sCAAY,OAAO,EAAE,KAAK;AAAA,IACjC,QAAQ;AAAA,IACR,MAAM;AAAA,MACN,QAAQ;AAAA,IACR;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,iBAAiB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAChG,QAAM,WAAW,MAAM,OAAO,KAAK;AAEnC,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,SAAS,SAAS;AAAA,IAClB,MAAM;AAAA,MACN;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,YAAY,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC3F,QAAM,SAAS,MAAM,OAAO,SAAS,IAAI,OAAO,EAAE;AAElD,MAAI,CAAC,QAAQ;AACT,WAAO,KAAK,IAAI,aAAa,oBAAoB,sCAAY,SAAS,CAAC;AAAA,EAC3E;AAEA,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,MACN;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,eAAe,WAAW,OAAO,KAAc,KAAe,SAAuB;AAE9F,QAAM,gBAAgB,mBAAmB,MAAM,IAAI,IAAI;AAGvD,QAAM,gBAAgB,MAAM,OAAO,kBAAkB,IAAI,OAAO,IAAI,eAAe;AAAA,IAC/E,KAAK;AAAA,IACL,eAAe;AAAA,EACnB,CAAC;AAED,MAAI,CAAC,eAAe;AAChB,WAAO,KAAK,IAAI,aAAa,oBAAoB,sCAAY,SAAS,CAAC;AAAA,EAC3E;AAGA,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,MACN,QAAQ;AAAA,IACR;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,eAAe,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC9F,QAAM,SAAS,MAAM,OAAO,kBAAkB,IAAI,OAAO,EAAE;AAE3D,MAAI,CAAC,QAAQ;AACT,WAAO,KAAK,IAAI,aAAa,oBAAoB,sCAAY,SAAS,CAAC;AAAA,EAC3E;AAEA,MAAI,OAAO,sCAAY,UAAU,EAAE,KAAK;AAAA,IACpC,QAAQ;AAAA,IACR,MAAM;AAAA,EACV,CAAC;AACL,CAAC;;;AOxFD,IAAAC,4BAA4B;AAC5B,0BAAgB;;;ACFhB,IAAAC,mBAAgD;;;ACAzC,IAAK,WAAL,kBAAKC,cAAL;AACL,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,kBAAe;AACf,EAAAA,UAAA,WAAQ;AAHE,SAAAA;AAAA,GAAA;AAML,IAAK,kBAAL,kBAAKC,qBAAL;AACL,EAAAA,iBAAA,eAAY;AACZ,EAAAA,iBAAA,kBAAe;AACf,EAAAA,iBAAA,iBAAc;AACd,EAAAA,iBAAA,cAAW;AACX,EAAAA,iBAAA,cAAW;AACX,EAAAA,iBAAA,eAAY;AANF,SAAAA;AAAA,GAAA;;;ADJZ,sBAAmB;AAiBnB,IAAM,aAAa,IAAI;AAAA,EACnB;AAAA,IACI,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,kBAAkB;AAAA,MACnC,MAAM;AAAA,IACV;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,mBAAmB;AAAA,MACpC,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,QACN,WAAW,CAAC,MAAc,8CAA8C,KAAK,CAAC;AAAA,QAC9E,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,MAAM,wBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,IACT;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,sBAAsB;AAAA,MACvC,WAAW,CAAC,GAAG,wCAAwC;AAAA,MACvD,QAAQ;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,MAAM,OAAO,OAAO,QAAQ;AAAA,MAC5B;AAAA,IACJ;AAAA,IACA,qBAAqB;AAAA,MACjB;AAAA,QACI,MAAM,wBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,MACP;AAAA,QACI,MAAM,wBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,IACA,oBAAoB;AAAA,IACpB,sBAAsB;AAAA,EAC1B;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAGA,WAAW,IAAI,QAAQ,eAAgB,MAAM;AACzC,MAAI,CAAC,KAAK,WAAW,UAAU,EAAG,QAAO,KAAK;AAE9C,MAAI;AACA,UAAM,OAAO,MAAM,gBAAAC,QAAO,QAAQ,EAAE;AACpC,SAAK,WAAW,MAAM,gBAAAA,QAAO,KAAK,KAAK,UAAU,IAAI;AACrD,SAAK;AAAA,EACT,SAAS,OAAY;AACjB,SAAK,KAAK;AAAA,EACd;AACJ,CAAC;AAGD,WAAW,QAAQ,kBAAkB,eAAgB,mBAA6C;AAC9F,SAAO,gBAAAA,QAAO,QAAQ,mBAAmB,KAAK,QAAQ;AAC1D;AAEO,IAAM,OAAO,iBAAAC,QAAS,MAAa,QAAQ,UAAU;;;ADtErD,IAAM,UAAU,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEzF,MAAI;AACJ,MAAI,IAAI,QAAQ,iBAAiB,IAAI,QAAQ,cAAc,WAAW,QAAQ,GAAG;AAC7E,YAAQ,IAAI,QAAQ,cAAc,MAAM,GAAG,EAAE,CAAC;AAAA,EAClD;AAEA,MAAI,CAAC,OAAO;AACR,WAAO,KAAK,IAAI,aAAa,uDAAuD,sCAAY,YAAY,CAAC;AAAA,EACjH;AAGA,QAAM,UAAU,oBAAAC,QAAI,OAAO,OAAO,IAAI,UAAU;AAGhD,QAAM,OAAO,MAAM,KAAK,SAAS,QAAQ,EAAE;AAC3C,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,sDAAsD,sCAAY,YAAY,CAAC;AAAA,EAChH;AAGA,MAAI,OAAO;AACX,OAAK;AACT,CAAC;AAEM,IAAM,aAAa,IAAI,UAAsB;AAChD,SAAO,CAAC,KAAc,KAAe,SAAuB;AACxD,QAAI,CAAC,MAAM,SAAS,IAAI,KAAK,IAAI,GAAG;AAChC,aAAO,KAAK,IAAI,aAAa,qDAAqD,sCAAY,SAAS,CAAC;AAAA,IAC5G;AACA,SAAK;AAAA,EACT;AACJ;;;ARhDA,4BAAgC;;;AWJhC,IAAAC,4BAA4B;AAKrB,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,sCAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,oBAAoB,QAAsB,OAAO,oBAAoB;AACjF,SAAO;AAAA,IACL,SAAS;AAAA,MACP,CAAC,IAAI,GAAG;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AXpBF,IAAAC,cAAkB;AAElB,IAAAC,yBAAqC;AAAA,IAErC,6CAAqB,aAAC;AAEtB,IAAM,aAAS,uBAAO;AACf,IAAM,WAAW,IAAI,sCAAgB;AAE5C,SAAS,kBAAkB,mBAAmB,iBAAiB;AAAA,EAC3D,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,aAAa;AACjB,CAAC;AAKD,SAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,UAAU;AAAA,EACjB,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AACpD,CAAC;AACD,OAAO,IAAI,KAAK,cAAc;AAI9B,SAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,UAAU;AAAA,EACjB,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AACpD,CAAC;AACD,OAAO,IAAI,QAAQ,SAAS;AAG5B,OAAO,IAAI,OAAO;AAClB,OAAO,IAAI,8BAAyB,CAAC;AAIrC,SAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,UAAU;AAAA,EACjB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,MAAM,oBAAoB,kBAAkB;AAAA,EAChD;AAAA,EACA,WAAW,kBAAkB,oBAAoB,SAAS;AAC9D,CAAC;AACD,OAAO,KAAK,KAAK,YAAY;AAI7B,SAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,UAAU;AAAA,EACjB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,QAAQ,cAAE,OAAO,EAAE,WAAW,cAAE,OAAO,EAAE,CAAC;AAAA,IAC1C,MAAM,oBAAoB,kBAAkB;AAAA,EAChD;AAAA,EACA,WAAW,kBAAkB,oBAAoB,SAAS;AAC9D,CAAC;AACD,OAAO,MAAM,QAAQ,YAAY;AAIjC,SAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,UAAU;AAAA,EACjB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AACpD,CAAC;AACD,OAAO,OAAO,QAAQ,YAAY;;;AY1FlC,IAAAC,kBAAuB;;;ACCvB,IAAAC,4BAA4B;AAC5B,IAAAC,uBAAgB;AAChB,oBAAmB;;;ACHnB,IAAAC,cAAkB;AAGX,IAAM,mBAAmB,cAAE,OAAO;AAAA,EACrC,MAAM,cAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC;AAAA,EAC5D,OAAO,cAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AAAA,EACpE,MAAM,cAAE,WAAW,QAAQ,EAAE,SAAS;AAC1C,CAAC;AAEM,IAAM,kBAAkB,cAAE,OAAO;AAAA,EACpC,OAAO,cAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,sBAAsB;AACtD,CAAC;AAEM,IAAM,mBAAmB,cAAE,OAAO;AAAA,EACrC,MAAM,cAAE,OAAO,EAAE,IAAI,GAAG,oCAAoC,EAAE,SAAS;AAAA,EACvE,OAAO,cAAE,OAAO,EAAE,MAAM,uBAAuB,EAAE,SAAS;AAAA,EAC1D,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC,EAAE,SAAS;AAAA,EAC/E,MAAM,cAAE,WAAW,QAAQ,EAAE,SAAS;AAC1C,CAAC;AAEM,IAAM,uBAAuB,cAAE,OAAO;AAAA,EACzC,OAAO,cAAE,OAAO,EAAE,MAAM,uBAAuB;AACnD,CAAC;AAEM,IAAM,sBAAsB,cAAE,OAAO;AAAA,EACxC,OAAO,cAAE,OAAO;AAAA,EAChB,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AACxE,CAAC;;;AC7BD,wBAAuB;AAShB,IAAM,YAAY,OAAO,YAA0B;AAEtD,QAAM,cAAc,kBAAAC,QAAW,gBAAgB;AAAA,IAC3C,MAAM,IAAI;AAAA,IACV,MAAM,IAAI;AAAA,IACV,MAAM;AAAA,MACF,MAAM,IAAI;AAAA,MACV,MAAM,IAAI;AAAA,IACd;AAAA,EACJ,CAAC;AAGD,QAAM,cAAc;AAAA,IAChB,MAAM,IAAI;AAAA,IACV,IAAI,QAAQ;AAAA,IACZ,SAAS,QAAQ;AAAA,IACjB,MAAM,QAAQ;AAAA,EAClB;AAGA,QAAM,YAAY,SAAS,WAAW;AAC1C;;;AFpBA,IAAM,YAAY,CAAC,OAAY;AAC3B,SAAO,qBAAAC,QAAI,KAAK,EAAE,GAAG,GAAG,IAAI,YAAmB;AAAA,IAC3C,WAAW,IAAI;AAAA,EACnB,CAAC;AACL;AAEO,IAAM,WAAW,WAAW,OAAO,KAAc,KAAe,SAAuB;AAE1F,QAAM,gBAAgB,iBAAiB,MAAM,IAAI,IAAI;AAGrD,QAAM,eAAe,MAAM,KAAK,QAAQ,EAAE,OAAO,cAAc,MAAM,CAAC;AACtE,MAAI,cAAc;AACd,WAAO,KAAK,IAAI,aAAa,wBAAwB,sCAAY,QAAQ,CAAC;AAAA,EAC9E;AAGA,QAAM,UAAU,MAAM,KAAK,OAAO,aAAa;AAG/C,QAAM,QAAQ,UAAW,QAAQ,IAAe,SAAS,CAAC;AAG1D,MAAI,OAAO,sCAAY,OAAO,EAAE,KAAK;AAAA,IACjC,QAAQ;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACN,MAAM;AAAA,QACF,IAAI,QAAQ;AAAA,QACZ,MAAM,QAAQ;AAAA,QACd,OAAO,QAAQ;AAAA,QACf,MAAM,QAAQ;AAAA,MAClB;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,QAAQ,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEvF,QAAM,gBAAgB,gBAAgB,MAAM,IAAI,IAAI;AAGpD,QAAM,OAAO,MAAM,KAAK,QAAQ,EAAE,OAAO,cAAc,MAAM,CAAC,EAAE,OAAO,WAAW;AAClF,MAAI,CAAC,QAAQ,CAAE,MAAM,KAAK,gBAAgB,cAAc,QAAQ,GAAI;AAChE,WAAO,KAAK,IAAI,aAAa,+BAA+B,sCAAY,YAAY,CAAC;AAAA,EACzF;AAGA,QAAM,QAAQ,UAAU,KAAK,IAAI,SAAS,CAAC;AAG3C,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACN,MAAM;AAAA,QACF,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,MACf;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,QAAQ,WAAW,OAAO,KAAc,KAAe,SAAuB;AACzF,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC9B,QAAQ;AAAA,IACR,MAAM;AAAA,MACJ,MAAM,IAAI;AAAA,IACZ;AAAA,EACF,CAAC;AACH,CAAC;AAEM,IAAM,iBAAiB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEhG,QAAM,gBAAgB,qBAAqB,MAAM,IAAI,IAAI;AAGzD,QAAM,OAAO,MAAM,KAAK,QAAQ,EAAE,OAAO,cAAc,MAAM,CAAC;AAC9D,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,yCAAyC,sCAAY,SAAS,CAAC;AAAA,EAChG;AAGA,QAAM,aAAa,cAAAC,QAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AACxD,OAAK,qBAAqB,cAAAA,QACrB,WAAW,QAAQ,EACnB,OAAO,UAAU,EACjB,OAAO,KAAK;AACjB,OAAK,uBAAuB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,GAAI;AAEhE,QAAM,KAAK,KAAK,EAAE,oBAAoB,MAAM,CAAC;AAG7C,QAAM,WAAW,GAAG,IAAI,WAAW,mBAAmB,UAAU;AAChE,QAAM,UAAU,2EAA2E,QAAQ;AAAA;AAEnG,MAAI;AACA,UAAM,UAAU;AAAA,MACZ,OAAO,KAAK;AAAA,MACZ,SAAS;AAAA,MACT;AAAA,IACJ,CAAC;AAED,QAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,MAC5B,QAAQ;AAAA,MACR,SAAS;AAAA,IACb,CAAC;AAAA,EACL,SAAS,KAAK;AACV,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAC5B,UAAM,KAAK,KAAK,EAAE,oBAAoB,MAAM,CAAC;AAE7C,WAAO,KAAK,IAAI,aAAa,0DAA0D,sCAAY,qBAAqB,CAAC;AAAA,EAC7H;AACJ,CAAC;AAEM,IAAM,gBAAgB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAE/F,QAAM,gBAAgB,oBAAoB,MAAM,IAAI,IAAI;AAGxD,QAAM,cAAc,cAAAA,QACf,WAAW,QAAQ,EACnB,OAAO,cAAc,KAAK,EAC1B,OAAO,KAAK;AAEjB,QAAM,OAAO,MAAM,KAAK,QAAQ;AAAA,IAC5B,oBAAoB;AAAA,IACpB,sBAAsB,EAAE,KAAK,KAAK,IAAI,EAAE;AAAA,EAC5C,CAAC;AAED,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,mCAAmC,sCAAY,WAAW,CAAC;AAAA,EAC5F;AAGA,OAAK,WAAW,cAAc;AAC9B,OAAK,qBAAqB;AAC1B,OAAK,uBAAuB;AAC5B,QAAM,KAAK,KAAK;AAGhB,QAAM,QAAQ,UAAU,KAAK,IAAI,SAAS,CAAC;AAE3C,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,QACF,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,MACf;AAAA,IACJ;AAAA,EACJ,CAAC;AACL,CAAC;;;ADrKD,IAAAC,yBAAgC;AAIhC,IAAMC,cAAS,wBAAO;AACf,IAAMC,YAAW,IAAI,uCAAgB;AAG5CA,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,gBAAgB;AAAA,EACvB,SAAS;AAAA,IACL,MAAM,oBAAoB,gBAAgB;AAAA,EAC9C;AAAA,EACA,WAAW,kBAAkB,kBAAkB,SAAS;AAC5D,CAAC;AACDD,QAAO,KAAK,aAAa,QAAQ;AAGjCC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,gBAAgB;AAAA,EACvB,SAAS;AAAA,IACL,MAAM,oBAAoB,eAAe;AAAA,EAC7C;AAAA,EACA,WAAW,kBAAkB,iBAAiB,SAAS;AAC3D,CAAC;AACDD,QAAO,KAAK,UAAU,KAAK;AAG3BC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,gBAAgB;AAAA,EACvB,SAAS;AAAA,IACL,MAAM,oBAAoB,oBAAoB;AAAA,EAClD;AAAA,EACA,WAAW,kBAAkB,sBAAsB,SAAS;AAChE,CAAC;AACDD,QAAO,KAAK,oBAAoB,cAAc;AAG9CC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,gBAAgB;AAAA,EACvB,SAAS;AAAA,IACL,MAAM,oBAAoB,mBAAmB;AAAA,EACjD;AAAA,EACA,WAAW,kBAAkB,qBAAqB,SAAS;AAC/D,CAAC;AACDD,QAAO,KAAK,mBAAmB,aAAa;AAG5CC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,gBAAgB;AAAA,EACvB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,WAAW,kBAAkB,iBAAiB,SAAS;AAC3D,CAAC;AACDD,QAAO,IAAI,OAAO,SAAS,KAAK;;;AIvEhC,IAAAE,kBAAuB;;;ACCvB,IAAAC,4BAA4B;;;ACD5B,IAAAC,mBAAgD;AAgBhD,IAAM,kBAAkB,IAAI;AAAA,EACxB;AAAA,IACI,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,mBAAmB;AAAA,MACpC,MAAM;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,yBAAyB;AAAA,IAC9C;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,sBAAsB;AAAA,IAC3C;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,MAAM,OAAO,OAAO,eAAe;AAAA,MACnC;AAAA,IACJ;AAAA,IACA,aAAa;AAAA,MACT,MAAM,wBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,IACT;AAAA,IACA,WAAW;AAAA,MACP,MAAM,wBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,IACT;AAAA,IACA,aAAa;AAAA,MACb;AAAA,QACI,MAAM,wBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACA;AAAA,IACA,WAAW;AAAA,MACX;AAAA,QACI,MAAM,wBAAO,MAAM;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACA;AAAA,EACJ;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAGA,gBAAgB,MAAM,EAAE,UAAU,GAAG,QAAQ,EAAE,CAAC;AAChD,gBAAgB,MAAM,EAAE,aAAa,EAAE,CAAC;AACxC,gBAAgB,MAAM,EAAE,WAAW,EAAE,CAAC;AAE/B,IAAM,YAAY,iBAAAC,QAAS,MAAkB,aAAa,eAAe;;;ACnEhF,IAAAC,cAAkB;AAGX,IAAM,wBAAwB,cAAE,OAAO;AAAA,EAC1C,OAAO,cAAE,OAAO,EAAE,IAAI,GAAG,qCAAqC;AAAA,EAC9D,aAAa,cAAE,OAAO,EAAE,IAAI,IAAI,4CAA4C;AAAA,EAC5E,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AAAA,EACpE,WAAW,cAAE,OAAO,EAAE,SAAS;AACnC,CAAC;AAEM,IAAM,wBAAwB,cAAE,OAAO;AAAA,EAC1C,OAAO,cAAE,OAAO,EAAE,IAAI,GAAG,qCAAqC,EAAE,SAAS;AAAA,EACzE,aAAa,cAAE,OAAO,EAAE,IAAI,IAAI,4CAA4C,EAAE,SAAS;AAAA,EACvF,UAAU,cAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC,EAAE,SAAS;AAAA,EAC/E,QAAQ,cAAE,WAAW,eAAe,EAAE,SAAS;AAAA,EAC/C,WAAW,cAAE,OAAO,EAAE,SAAS;AACnC,CAAC;;;AFRD,IAAAC,cAAkB;AAEX,IAAM,kBAAkB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEjG,QAAM,gBAAgB,sBAAsB,MAAM,IAAI,IAAI;AAG1D,MAAI,cAAc,WAAW;AACzB,UAAM,SAAS,MAAM,OAAO,SAAS,cAAc,SAAS;AAC5D,QAAI,CAAC,QAAQ;AACT,aAAO,KAAK,IAAI,aAAa,oBAAoB,sCAAY,SAAS,CAAC;AAAA,IAC3E;AAAA,EACJ;AAGA,QAAM,eAAe,MAAM,UAAU,OAAO;AAAA,IACxC,GAAG;AAAA,IACH,aAAa,IAAI,KAAK;AAAA,EAC1B,CAAC;AAGD,QAAM,KAAK,kBAAkB,IAAI,KAAK,KAAK;AAAA,IACvC,OAAO,EAAE,qBAAqB,aAAa,IAAI;AAAA,EACnD,CAAC;AAGD,MAAI,OAAO,sCAAY,OAAO,EAAE,KAAK;AAAA,IACjC,QAAQ;AAAA,IACR,MAAM;AAAA,MACN,WAAW;AAAA,IACX;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,mBAAmB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAElG,MAAI,QAAQ,CAAC;AAEb,MAAI,IAAI,KAAK,kCAA2B;AAEpC,YAAQ,EAAE,aAAa,IAAI,KAAK,IAAI;AAAA,EACxC,WAAW,IAAI,KAAK,4CAAgC;AAEhD,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,QAAQ;AACb,aAAO,KAAK,IAAI,aAAa,0CAA0C,sCAAY,SAAS,CAAC;AAAA,IAC7F;AACA,YAAQ,EAAE,WAAW,OAAO,IAAI;AAAA,EACpC;AAIA,MAAI,IAAI,MAAM,UAAU;AACpB,YAAQ,EAAE,GAAG,OAAO,UAAU,IAAI,MAAM,SAAS;AAAA,EACrD;AACA,MAAI,IAAI,MAAM,QAAQ;AAClB,YAAQ,EAAE,GAAG,OAAO,QAAQ,IAAI,MAAM,OAAO;AAAA,EACjD;AAGA,QAAM,OAAO,OAAO,SAAS,IAAI,MAAM,IAAc,KAAK;AAC1D,QAAM,QAAQ,OAAO,SAAS,IAAI,MAAM,KAAe,KAAK;AAC5D,QAAM,QAAQ,OAAO,KAAK;AAE1B,QAAM,aAAa,MAAM,UAAU,KAAK,KAAK,EACxC,SAAS,eAAe,YAAY,EACpC,SAAS,aAAa,mBAAmB,EACzC,KAAK,EAAE,WAAW,GAAG,CAAC,EACtB,KAAK,IAAI,EACT,MAAM,KAAK;AAEhB,QAAM,QAAQ,MAAM,UAAU,eAAe,KAAK;AAElD,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,SAAS,WAAW;AAAA,IACpB;AAAA,IACA,MAAM;AAAA,MACN;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,eAAe,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC9F,QAAM,YAAY,MAAM,UAAU,SAAS,IAAI,OAAO,EAAE,EACnD,SAAS,eAAe,YAAY,EACpC,SAAS,aAAa,mBAAmB,EACzC,SAAS,WAAW,EACpB,SAAS,aAAa;AAE3B,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,oCAA6B,UAAU,YAAY,IAAI,SAAS,MAAM,IAAI,KAAK,IAAI,SAAS,GAAG;AACxG,WAAO,KAAK,IAAI,aAAa,qDAAqD,sCAAY,SAAS,CAAC;AAAA,EAC5G;AAEA,MAAI,IAAI,KAAK,4CAAgC;AACzC,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,UAAW,UAAU,aAAa,UAAU,UAAU,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,GAAI;AACtG,aAAO,KAAK,IAAI,aAAa,qDAAqD,sCAAY,SAAS,CAAC;AAAA,IACxG;AAAA,EACJ;AAEA,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,MACN;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,kBAAkB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEjG,QAAM,gBAAgB,sBAAsB,MAAM,IAAI,IAAI;AAG1D,QAAM,YAAY,MAAM,UAAU,SAAS,IAAI,OAAO,EAAE;AACxD,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,kCAA2B;AAEpC,QAAI,UAAU,YAAY,SAAS,MAAM,IAAI,KAAK,IAAI,SAAS,GAAG;AAC9D,aAAO,KAAK,IAAI,aAAa,uDAAuD,sCAAY,SAAS,CAAC;AAAA,IAC9G;AACA,QAAI,UAAU,WAAW,aAAa;AAClC,aAAO,KAAK,IAAI,aAAa,wDAAwD,sCAAY,SAAS,CAAC;AAAA,IAC/G;AAGA,WAAO,cAAc;AACrB,WAAO,cAAc;AAAA,EACzB,WAAW,IAAI,KAAK,4CAAgC;AAGhD,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,UAAW,UAAU,aAAa,UAAU,UAAU,SAAS,MAAM,QAAQ,IAAI,SAAS,GAAI;AAC/F,aAAO,KAAK,IAAI,aAAa,uDAAuD,sCAAY,SAAS,CAAC;AAAA,IAC9G;AAGA,UAAM,iBAAiB,CAAC,QAAQ;AAChC,WAAO,KAAK,aAAa,EAAE,QAAQ,CAAC,QAAQ;AACxC,UAAI,CAAC,eAAe,SAAS,GAAG,GAAG;AAC/B,eAAO,cAAc,GAAiC;AAAA,MAC1D;AAAA,IACJ,CAAC;AAAA,EACL;AAGA,QAAM,mBAAmB,MAAM,UAAU,kBAAkB,IAAI,OAAO,IAAI,eAAe;AAAA,IACrF,KAAK;AAAA,IACL,eAAe;AAAA,EACnB,CAAC,EACI,SAAS,eAAe,YAAY,EACpC,SAAS,aAAa,mBAAmB;AAG9C,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,MACN,WAAW;AAAA,IACX;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,kBAAkB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEjG,QAAM,YAAY,MAAM,UAAU,SAAS,IAAI,OAAO,EAAE;AACxD,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,kCAA2B;AAEpC,QAAI,UAAU,YAAY,SAAS,MAAM,IAAI,KAAK,IAAI,SAAS,GAAG;AAClE,aAAO,KAAK,IAAI,aAAa,uDAAuD,sCAAY,SAAS,CAAC;AAAA,IAC1G;AACA,QAAI,UAAU,WAAW,aAAa;AACtC,aAAO,KAAK,IAAI,aAAa,wDAAwD,sCAAY,SAAS,CAAC;AAAA,IAC3G;AAAA,EACJ,WAAW,IAAI,KAAK,4CAAgC;AAEhD,WAAO,KAAK,IAAI,aAAa,yCAAyC,sCAAY,SAAS,CAAC;AAAA,EAChG;AAGA,QAAM,UAAU,kBAAkB,IAAI,OAAO,EAAE;AAG/C,QAAM,KAAK,kBAAkB,UAAU,aAAa;AAAA,IAChD,OAAO,EAAE,qBAAqB,UAAU,IAAI;AAAA,EAChD,CAAC;AAGD,MAAI,OAAO,sCAAY,UAAU,EAAE,KAAK;AAAA,IACpC,QAAQ;AAAA,IACR,MAAM;AAAA,EACV,CAAC;AACL,CAAC;AAEM,IAAM,wBAAwB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEvG,QAAM,eAAe,cAAE,OAAO;AAAA,IAC1B,QAAQ,cAAE,KAAK,CAAC,aAAa,gBAAgB,eAAe,YAAY,YAAY,WAAW,CAAC;AAAA,EACpG,CAAC;AACD,QAAM,gBAAgB,aAAa,MAAM,IAAI,IAAI;AAGjD,QAAM,YAAY,MAAM,UAAU,SAAS,IAAI,OAAO,EAAE;AACxD,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,kCAA2B;AACpC,WAAO,KAAK,IAAI,aAAa,2CAA2C,sCAAY,SAAS,CAAC;AAAA,EAClG;AAEA,MAAI,IAAI,KAAK,4CAAgC;AAEzC,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,UAAW,UAAU,aAAa,UAAU,UAAU,SAAS,MAAM,QAAQ,IAAI,SAAS,GAAI;AAC/F,aAAO,KAAK,IAAI,aAAa,uDAAuD,sCAAY,SAAS,CAAC;AAAA,IAC9G;AAAA,EACJ;AAGA,QAAM,mBAAmB,MAAM,UAAU;AAAA,IACrC,IAAI,OAAO;AAAA,IACX,EAAE,QAAQ,cAAc,OAAO;AAAA,IAC/B;AAAA,MACI,KAAK;AAAA,MACL,eAAe;AAAA,IACnB;AAAA,EACJ,EACC,SAAS,eAAe,YAAY,EACpC,SAAS,aAAa,mBAAmB;AAG1C,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,MACF,WAAW;AAAA,IACf;AAAA,EACJ,CAAC;AACL,CAAC;;;ADzPD,IAAAC,yBAAgC;AAGhC,IAAAC,cAAkB;AAClB,IAAAC,yBAAqC;AAAA,IAErC,6CAAqB,aAAC;AAEtB,IAAMC,cAAS,wBAAO;AACf,IAAMC,YAAW,IAAI,uCAAgB;AAG5CA,UAAS,kBAAkB,mBAAmB,iBAAiB;AAAA,EAC3D,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,aAAa;AACjB,CAAC;AAEDD,QAAO,IAAI,OAAO;AAGlBC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,MAAM,oBAAoB,qBAAqB;AAAA,EACnD;AAAA,EACA,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AACDD,QAAO,MAAM,GAAG,EAAE,KAAK,eAAe,EAAE,IAAI,gBAAgB;AAG5DC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AAGDD,QACK,MAAM,MAAM,EACZ,IAAI,YAAY,EAChB,MAAM,eAAe,EACrB,OAAO,uDAA2C,GAAG,eAAe;AAGzEC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AAGDA,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC;AAAA,IACnC,MAAM,oBAAoB,qBAAqB;AAAA,EACnD;AAAA,EACA,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AAGDA,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AAGDA,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,YAAY;AAAA,EACnB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC;AAAA,IACnC,MAAM,oBAAoB,cAAE,OAAO;AAAA,MAC/B,QAAQ,cAAE,KAAK,CAAC,aAAa,gBAAgB,eAAe,YAAY,YAAY,WAAW,CAAC;AAAA,IACpG,CAAC,CAAC;AAAA,EACN;AAAA,EACA,WAAW,kBAAkB,uBAAuB,SAAS;AACjE,CAAC;AAGDD,QAAO,MAAM,eAAe,iEAAgD,GAAG,qBAAqB;;;AItHpG,IAAAE,kBAAuB;;;ACKhB,IAAM,cAAc,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC7F,QAAM,QAAQ,MAAM,KAAK,KAAK,EAAE,OAAO,WAAW;AAClD,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACjB,SAAS;AAAA,IACT,MAAM;AAAA,MACF;AAAA,IACJ;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,cAAc,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC7F,QAAM,OAAO,MAAM,KAAK,SAAS,IAAI,OAAO,EAAE,EAAE,OAAO,WAAW;AAElE,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,kBAAkB,GAAG,CAAC;AAAA,EACvD;AAEA,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACjB,SAAS;AAAA,IACT,MAAM;AAAA,MACF;AAAA,IACJ;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,aAAa,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC5F,QAAM,EAAE,MAAM,OAAO,KAAK,IAAI,IAAI;AAClC,QAAM,SAAS,IAAI,OAAO;AAG1B,QAAM,OAAO,MAAM,KAAK,SAAS,MAAM;AACvC,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,kBAAkB,GAAG,CAAC;AAAA,EACvD;AAGA,MAAI,QAAQ,CAAC,OAAO,OAAO,QAAQ,EAAE,SAAS,IAAI,GAAG;AACjD,WAAO,KAAK,IAAI,aAAa,gBAAgB,GAAG,CAAC;AAAA,EACrD;AAGA,MAAI,SAAS,UAAU,KAAK,OAAO;AAC/B,UAAM,eAAe,MAAM,KAAK,QAAQ,EAAE,MAAM,CAAC;AACjD,QAAI,cAAc;AACd,aAAO,KAAK,IAAI,aAAa,0BAA0B,GAAG,CAAC;AAAA,IAC/D;AAAA,EACJ;AAGA,QAAM,cAAc,MAAM,KAAK;AAAA,IAC3B;AAAA,IACA;AAAA,MACI,MAAM,QAAQ,KAAK;AAAA,MACnB,OAAO,SAAS,KAAK;AAAA,MACrB,MAAM,QAAQ,KAAK;AAAA,IACvB;AAAA,IACA,EAAE,KAAK,KAAK;AAAA,EAChB,EAAE,OAAO,WAAW;AAEpB,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACjB,SAAS;AAAA,IACT,MAAM;AAAA,MACF,MAAM;AAAA,IACV;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,aAAa,WAAW,OAAO,KAAc,KAAe,SAAuB;AAC5F,QAAM,SAAS,IAAI,OAAO;AAG1B,QAAM,OAAO,MAAM,KAAK,SAAS,MAAM;AACvC,MAAI,CAAC,MAAM;AACP,WAAO,KAAK,IAAI,aAAa,kBAAkB,GAAG,CAAC;AAAA,EACvD;AAGA,MAAI,WAAW,IAAI,KAAK,IAAI,SAAS,GAAG;AACpC,WAAO,KAAK,IAAI,aAAa,sCAAsC,GAAG,CAAC;AAAA,EAC3E;AAGA,QAAM,KAAK,kBAAkB,MAAM;AAEnC,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACjB,SAAS;AAAA,IACT,SAAS;AAAA,EACb,CAAC;AACL,CAAC;;;AD1FD,IAAAC,yBAAgC;AAGhC,IAAAC,cAAkB;AAClB,IAAAC,yBAAqC;AAAA,IAErC,6CAAqB,aAAC;AAEtB,IAAMC,cAAS,wBAAO;AACf,IAAMC,YAAW,IAAI,uCAAgB;AAG5CA,UAAS,kBAAkB,mBAAmB,iBAAiB;AAAA,EAC3D,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,aAAa;AACjB,CAAC;AAGDA,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,OAAO;AAAA,EACd,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,WAAW,kBAAkB,kBAAkB,SAAS;AAC5D,CAAC;AACDD,QAAO;AAAA,EACH;AAAA,EACA;AAAA,EACA;AACJ;AAGAC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,OAAO;AAAA,EACd,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW,kBAAkB,kBAAkB,SAAS;AAC5D,CAAC;AACDD,QAAO;AAAA,EACH;AAAA,EACA;AAAA,EACA;AACJ;AAGAC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,OAAO;AAAA,EACd,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC;AAAA,IACnC,MAAM,oBAAoB,gBAAgB;AAAA,EAC9C;AAAA,EACA,WAAW,kBAAkB,kBAAkB,SAAS;AAC5D,CAAC;AACDD,QAAO;AAAA,EACH;AAAA,EACA;AAAA,EACA;AACJ;AAGAC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,OAAO;AAAA,EACd,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,cAAE,OAAO,EAAE,IAAI,cAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EAChD,WAAW;AAAA,IACP,OAAO;AAAA,MACH,aAAa;AAAA,MACb,SAAS;AAAA,QACL,oBAAoB;AAAA,UAChB,QAAQ;AAAA,YACJ,MAAM;AAAA,YACN,YAAY;AAAA,cACR,SAAS,EAAE,MAAM,UAAU;AAAA,cAC3B,SAAS,EAAE,MAAM,SAAS;AAAA,YAC9B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AACDD,QAAO;AAAA,EACH;AAAA,EACA;AAAA,EACA;AACJ;;;AEvGA,IAAAE,kBAAuB;;;ACCvB,IAAAC,4BAA4B;;;ACD5B,IAAAC,mBAAgD;AAUhD,IAAM,iBAAiB,IAAI;AAAA,EACzB;AAAA,IACE,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU,CAAC,MAAM,8BAA8B;AAAA,IACjD;AAAA,IACA,eAAe;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA,WAAW;AAAA,MACT,MAAM,wBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,MACL,UAAU,CAAC,MAAM,4BAA4B;AAAA,IAC/C;AAAA,IACA,WAAW;AAAA,MACT,MAAM,wBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,MACL,UAAU,CAAC,MAAM,iCAAiC;AAAA,IACpD;AAAA,EACF;AAAA,EACA;AAAA,IACE,YAAY;AAAA,EACd;AACF;AAEO,IAAM,WAAW,iBAAAC,QAAS,MAAiB,YAAY,cAAc;;;ACnC5E,IAAAC,cAAkB;AAEX,IAAM,uBAAuB,cAAE,OAAO;AAAA,EAC3C,SAAS,cAAE,OAAO,EAAE,IAAI,GAAG,qBAAqB;AAAA,EAChD,eAAe,cAAE,OAAO,EAAE,SAAS;AAAA,EACnC,WAAW,cAAE,OAAO;AACtB,CAAC;;;AFIM,IAAM,iBAAiB,WAAW,OAAO,KAAc,KAAe,SAAuB;AAEhG,QAAM,gBAAgB,qBAAqB,MAAM,IAAI,IAAI;AAGzD,QAAM,YAAY,MAAM,UAAU,SAAS,cAAc,SAAS;AAClE,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,kCAA2B;AAEpC,QAAI,UAAU,YAAY,SAAS,MAAM,IAAI,KAAK,IAAI,SAAS,GAAG;AAC9D,aAAO,KAAK,IAAI,aAAa,2DAA2D,sCAAY,SAAS,CAAC;AAAA,IAClH;AAEA,WAAO,cAAc;AAAA,EACzB,WAAW,IAAI,KAAK,4CAAgC;AAEhD,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,UAAW,UAAU,aAAa,UAAU,UAAU,SAAS,MAAM,OAAO,KAAM;AACnF,aAAO,KAAK,IAAI,aAAa,2DAA2D,sCAAY,SAAS,CAAC;AAAA,IAClH;AAAA,EACJ;AAGA,QAAM,cAAc,MAAM,SAAc,OAAO;AAAA,IAC3C,GAAG;AAAA,IACH,WAAW,IAAI,KAAK;AAAA,EACxB,CAAC;AAGD,QAAM,UAAU,kBAAkB,cAAc,WAAW;AAAA,IACvD,OAAO,EAAE,WAAW,YAAY,IAAI;AAAA,EACxC,CAAC;AAED,QAAM,KAAK,kBAAkB,IAAI,KAAK,KAAK;AAAA,IACvC,OAAO,EAAE,WAAW,YAAY,IAAI;AAAA,EACxC,CAAC;AAGD,MAAI,OAAO,sCAAY,OAAO,EAAE,KAAK;AAAA,IACjC,QAAQ;AAAA,IACR,MAAM;AAAA,MACN,UAAU;AAAA,IACV;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,eAAe,WAAW,OAAO,KAAc,KAAe,SAAuB;AAE9F,QAAM,YAAY,MAAM,UAAU,SAAS,IAAI,OAAO,WAAW;AACjE,MAAI,CAAC,WAAW;AACZ,WAAO,KAAK,IAAI,aAAa,uBAAuB,sCAAY,SAAS,CAAC;AAAA,EAC9E;AAGA,MAAI,IAAI,KAAK,kCAA2B;AAEpC,QAAI,UAAU,YAAY,SAAS,MAAM,IAAI,KAAK,IAAI,SAAS,GAAG;AAC9D,aAAO,KAAK,IAAI,aAAa,sDAAsD,sCAAY,SAAS,CAAC;AAAA,IAC7G;AAAA,EACJ,WAAW,IAAI,KAAK,4CAAgC;AAEhD,UAAM,SAAS,MAAM,OAAO,QAAQ,EAAE,cAAc,IAAI,KAAK,MAAM,CAAC;AACpE,QAAI,CAAC,UAAW,UAAU,aAAa,UAAU,UAAU,SAAS,MAAO,OAAe,IAAI,SAAS,GAAI;AACvG,aAAO,KAAK,IAAI,aAAa,sDAAsD,sCAAY,SAAS,CAAC;AAAA,IAC7G;AAAA,EACJ;AAGA,QAAM,YAAY,MAAM,SAAc,KAAK,EAAE,WAAW,IAAI,OAAO,YAAY,CAAC,EAC3E,SAAS,aAAa,iBAAiB,EACvC,KAAK,EAAE,WAAW,GAAG,CAAC;AAG3B,MAAI,oBAAoB;AACxB,MAAI,IAAI,KAAK,kCAA2B;AACpC,wBAAoB,UAAU,IAAI,CAAC,aAA6C;AAC5E,YAAM,cAAc,SAAS,SAAS;AACtC,aAAO,YAAY;AACnB,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAGA,MAAI,OAAO,sCAAY,EAAE,EAAE,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,SAAS,kBAAkB;AAAA,IAC3B,MAAM;AAAA,MACF,WAAW;AAAA,IACf;AAAA,EACJ,CAAC;AACL,CAAC;;;ADrGD,IAAAC,yBAAgC;AAGhC,IAAAC,eAAkB;AAClB,IAAAC,yBAAqC;AAAA,IAErC,6CAAqB,cAAC;AAEtB,IAAMC,cAAS,wBAAO;AACf,IAAMC,YAAW,IAAI,uCAAgB;AAG5CA,UAAS,kBAAkB,mBAAmB,iBAAiB;AAAA,EAC3D,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,aAAa;AACjB,CAAC;AAEDD,QAAO,IAAI,OAAO;AAGlBC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,WAAW;AAAA,EAClB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS;AAAA,IACL,MAAM,oBAAoB,oBAAoB;AAAA,EAClD;AAAA,EACA,WAAW,kBAAkB,sBAAsB,SAAS;AAChE,CAAC;AACDD,QAAO,KAAK,KAAK,cAAc;AAG/BC,UAAS,aAAa;AAAA,EAClB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM,CAAC,WAAW;AAAA,EAClB,UAAU,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC;AAAA,EAChC,SAAS,EAAE,QAAQ,eAAE,OAAO,EAAE,aAAa,eAAE,OAAO,EAAE,CAAC,EAAE;AAAA,EACzD,WAAW,kBAAkB,sBAAsB,SAAS;AAChE,CAAC;AACDD,QAAO,IAAI,2BAA2B,YAAY;;;AvB5ClD,IAAAE,0BAAoD;AAE7C,SAAS,0BAA0B;AACtC,QAAMC,YAAW,IAAI,wCAAgB;AAAA,IACjC;AAAA,IACAA;AAAA,IACAA;AAAA,IACAA;AAAA,IACAA;AAAA,EACJ,CAAC;AACD,QAAM,YAAY,IAAI,2CAAmBA,UAAS,WAAW;AAE7D,SAAO,UAAU,iBAAiB;AAAA,IAC9B,SAAS;AAAA,IACT,MAAM;AAAA,MACF,SAAS;AAAA,MACT,OAAO;AAAA,IACX;AAAA,IACA,cAAc;AAAA,MACV,aAAa;AAAA,MACb,KAAK;AAAA,IACT;AAAA,EACJ,CAAC;AACL;","names":["import_http_status_codes","mongoose","dotenv","import_http_status_codes","import_zod","import_http_status_codes","import_mongoose","UserRole","ComplaintStatus","bcrypt","mongoose","jwt","import_http_status_codes","import_zod","import_zod_to_openapi","import_express","import_http_status_codes","import_jsonwebtoken","import_zod","nodemailer","jwt","crypto","import_zod_to_openapi","router","registry","import_express","import_http_status_codes","import_mongoose","mongoose","import_zod","import_zod","import_zod_to_openapi","import_zod","import_zod_to_openapi","router","registry","import_express","import_zod_to_openapi","import_zod","import_zod_to_openapi","router","registry","import_express","import_http_status_codes","import_mongoose","mongoose","import_zod","import_zod_to_openapi","import_zod","import_zod_to_openapi","router","registry","import_zod_to_openapi","registry"]}